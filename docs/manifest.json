{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v5.json", "dbt_version": "1.1.0", "generated_at": "2022-05-20T12:08:37.201843Z", "invocation_id": "b327569f-5dbf-4ae0-b37a-717696523976", "env": {}, "project_id": "81a49289dfa8ead79cbb5ef18b695e9b", "user_id": "615ae616-fcdb-45ad-822a-547074c44ad8", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.snowflake_dbt.daily_token_data": {"raw_sql": "{{\r\n    config(\r\n        materialized='table'\r\n    )\r\n}}\r\n\r\nwith tokens as (\r\n    SELECT * FROM {{ ref('tokens') }}\r\n),\r\nmarket_charts as (\r\n    SELECT * FROM {{ ref('market_charts') }}\r\n)\r\n\r\nSELECT t1.id as ID_STR\r\n    ,t2.symbol as SYMBOL_STR\r\n    ,t2.name as NAME_STR\r\n    ,DATEADD(DAY, -1, t1.timestamp) as CLOSE_DT\r\n    ,t1.timestamp as OPEN_DT\r\n    ,t1.price as PRICE_USD_NBR\r\n    ,t1.market_cap as MARKET_CAP_USD_NBR\r\n    ,t1.total_volume as TOTAL_VOLUME_USD_NBR\r\nFROM market_charts as t1\r\nLEFT JOIN tokens as t2\r\nON t1.id = t2.id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.snowflake_dbt.tokens", "model.snowflake_dbt.market_charts"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "transient": false, "query_tag": "dbt_transformed", "post-hook": [], "pre-hook": []}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS", "fqn": ["snowflake_dbt", "analytics", "coingecko", "daily_token_data"], "unique_id": "model.snowflake_dbt.daily_token_data", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "analytics\\coingecko\\daily_token_data.sql", "original_file_path": "models\\analytics\\coingecko\\daily_token_data.sql", "name": "daily_token_data", "alias": "daily_token_data", "checksum": {"name": "sha256", "checksum": "8b20e1bfebfd5100b89ba0c89a8d0c0e8c0443ef4230f316c05077f6b22cc31b"}, "tags": [], "refs": [["tokens"], ["market_charts"]], "sources": [], "description": "This table joins the Coingecko TOKENS lookup table with the MARKET_CHARTS daily price/market cap/volume data.\r\n\r\nThe old TIMESTAMP column represented the exact timestamp the price, market cap, and total volume we're taken at. Christian asked that this column be renamed to the the CLOSE_DT and for a new column to be created called OPEN_DT which just subtracts 1 day from the TIMESTAMP column.\r\n\r\nThis table is owned by Christian.", "columns": {"id_str": {"name": "id_str", "description": "Coingecko unique ID for each token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "symbol_str": {"name": "symbol_str", "description": "Token ticker", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name_str": {"name": "name_str", "description": "Token full name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "close_dt": {"name": "close_dt", "description": "The close datetime, one subtracted from the timestam column in market_charts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "open_dt": {"name": "open_dt", "description": "The open datetime, also representing the timestamp at which the data represents", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price_usd_nbr": {"name": "price_usd_nbr", "description": "Price in USD averaged across exchanges by Coingecko", "meta": {}, "data_type": null, "quote": null, "tags": []}, "market_cap_usd_nbr": {"name": "market_cap_usd_nbr", "description": "Market capitilization (price * circulating supply)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_volume_usd_nbr": {"name": "total_volume_usd_nbr", "description": "Total volume for the token across all exchanges tracked by Coingecko", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_dbt://models\\analytics\\coingecko\\schema.yml", "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\coingecko\\daily_token_data.sql", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "sync_all_columns", "materialized": "table", "transient": false, "query_tag": "dbt_transformed"}, "created_at": 1652369609.8330946, "compiled_sql": "\n\nwith tokens as (\n    SELECT * FROM TEST_DWH.DBT_GEORGE_ANALYTICS.tokens\n),\nmarket_charts as (\n    SELECT * FROM TEST_DWH.DBT_GEORGE_ANALYTICS.market_charts\n)\n\nSELECT t1.id as ID_STR\n    ,t2.symbol as SYMBOL_STR\n    ,t2.name as NAME_STR\n    ,DATEADD(DAY, -1, t1.timestamp) as CLOSE_DT\n    ,t1.timestamp as OPEN_DT\n    ,t1.price as PRICE_USD_NBR\n    ,t1.market_cap as MARKET_CAP_USD_NBR\n    ,t1.total_volume as TOTAL_VOLUME_USD_NBR\nFROM market_charts as t1\nLEFT JOIN tokens as t2\nON t1.id = t2.id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TEST_DWH.DBT_GEORGE_ANALYTICS.daily_token_data"}, "model.snowflake_dbt.market_charts": {"raw_sql": "{{ config(tags=[\"lookup\", \"dimension\"]) }}\r\n\r\nSELECT\r\n        id\r\n       ,timestamp\r\n       ,price\r\n       ,market_cap\r\n       ,total_volume\r\n  FROM {{ var(\"lake_db\") }}.COINGECKO_LANDING.MARKET_CHARTS", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["lookup", "dimension"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "query_tag": "dbt_landing", "post-hook": [], "pre-hook": []}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS", "fqn": ["snowflake_dbt", "landing", "coingecko", "market_charts"], "unique_id": "model.snowflake_dbt.market_charts", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "landing\\coingecko\\market_charts.sql", "original_file_path": "models\\landing\\coingecko\\market_charts.sql", "name": "market_charts", "alias": "market_charts", "checksum": {"name": "sha256", "checksum": "05400989325fd70c419f32d0346d9647e9fdea193daf04b2d83816141bad104e"}, "tags": ["lookup", "dimension"], "refs": [], "sources": [], "description": "The Coingecko MARKET_CHARTS table contains daily price, market cap, and total volume for all the tokens in the TOKENS lookup table. The Timestamp column corresponds to the exact point at which the other 3 data points are taken.\r\n\r\nThe source table of this is owned by the ?? team and populated by automation. The landing table is located at **LAKE.COINGECKO_LANDING.MARKET_CHARTS**", "columns": {"id": {"name": "id", "description": "Coingecko primary key for tokens", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "The exact time the number data points were taken at", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price": {"name": "price", "description": "The Coingecko average price at the timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "market_cap": {"name": "market_cap", "description": "Market cap (price * circulating supply) taken at the timestmap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_volume": {"name": "total_volume", "description": "24 hour combined volume of all tracked Coingecko exchanges for this token", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_dbt://models\\landing\\coingecko\\schema.yml", "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\coingecko\\market_charts.sql", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "sync_all_columns", "materialized": "view", "query_tag": "dbt_landing", "tags": ["lookup", "dimension"]}, "created_at": 1652369609.9520934, "compiled_sql": "\n\nSELECT\n        id\n       ,timestamp\n       ,price\n       ,market_cap\n       ,total_volume\n  FROM STG_LAKE.COINGECKO_LANDING.MARKET_CHARTS", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TEST_DWH.DBT_GEORGE_ANALYTICS.market_charts"}, "model.snowflake_dbt.tokens": {"raw_sql": "{{ config(tags=[\"lookup\", \"dimension\"]) }}\r\n\r\nSELECT\r\n        id\r\n       ,symbol\r\n       ,name\r\n       ,platforms\r\n  FROM {{ var(\"lake_db\") }}.COINGECKO_LANDING.TOKENS", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["lookup", "dimension"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "query_tag": "dbt_landing", "post-hook": [], "pre-hook": []}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS", "fqn": ["snowflake_dbt", "landing", "coingecko", "tokens"], "unique_id": "model.snowflake_dbt.tokens", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "landing\\coingecko\\tokens.sql", "original_file_path": "models\\landing\\coingecko\\tokens.sql", "name": "tokens", "alias": "tokens", "checksum": {"name": "sha256", "checksum": "fd1ab2ecdd53993f7aae5e166f6df9f73f4871c12ec968fe972f6abefac23a4c"}, "tags": ["lookup", "dimension"], "refs": [], "sources": [], "description": "The Coingecko TOKENS table is the lookup table used by Coingecko to id each token as well as include data on their name plus the contract addresses of tokens if applicable. Currently the table contains a a running list of the top 500 tokens by volume, meaning once a token enters the top 500 it gets put in the lookup table even if it leaves the top 500.\r\n\r\nThe source table of this is owned by the ?? team and populated by automation. The landing table is located at **LAKE.COINGECKO_LANDING.TOKENS**", "columns": {"id": {"name": "id", "description": "Coingecko primary key for tokens", "meta": {}, "data_type": null, "quote": null, "tags": []}, "symbol": {"name": "symbol", "description": "Token ticker", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Token full name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platforms": {"name": "platforms", "description": "json containing token addresses on mulitple chains", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_dbt://models\\landing\\coingecko\\schema.yml", "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\coingecko\\tokens.sql", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "sync_all_columns", "materialized": "view", "query_tag": "dbt_landing", "tags": ["lookup", "dimension"]}, "created_at": 1652369609.9490943, "compiled_sql": "\n\nSELECT\n        id\n       ,symbol\n       ,name\n       ,platforms\n  FROM STG_LAKE.COINGECKO_LANDING.TOKENS", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TEST_DWH.DBT_GEORGE_ANALYTICS.tokens"}, "model.snowflake_dbt.daos": {"raw_sql": "{{ config(tags=[\"lookup\", \"dimension\"]) }}\r\n\r\nSELECT\r\n        id as dao_id\r\n       ,name as dao_name\r\n       ,native_token\r\n  FROM {{ var(\"lake_db\") }}.DAO_LANDING.DAOS", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["lookup", "dimension"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "query_tag": "dbt_dao_treasuries", "post-hook": [], "pre-hook": []}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS", "fqn": ["snowflake_dbt", "landing", "dao_treasuries", "daos"], "unique_id": "model.snowflake_dbt.daos", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "landing\\dao_treasuries\\daos.sql", "original_file_path": "models\\landing\\dao_treasuries\\daos.sql", "name": "daos", "alias": "daos", "checksum": {"name": "sha256", "checksum": "2e877e96662a42e9fadbb9682bb882be708677e930c126e527ad4e88bb28a054"}, "tags": ["lookup", "dimension"], "refs": [], "sources": [], "description": "The master list of DAO's that Delphi is tracking for treasury values across the ecosystem.\r\n\r\nThis table is maintained by Aaron @Amvlvs\r\n\r\nIn this table you will find the unique identifier for the DAO along with its name and primary native token.\r\n\r\nThere are supporting tables to help build out DAO complexity but all of them should reference back to this table to define the unique ID.", "columns": {"dao_id": {"name": "dao_id", "description": "The primary identifier for DAO's", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dao_name": {"name": "dao_name", "description": "The name of the DAO", "meta": {}, "data_type": null, "quote": null, "tags": []}, "native_token": {"name": "native_token", "description": "The token name of the DAO", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_dbt://models\\landing\\dao_treasuries\\schema.yml", "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\dao_treasuries\\daos.sql", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "sync_all_columns", "materialized": "view", "query_tag": "dbt_dao_treasuries", "tags": ["lookup", "dimension"]}, "created_at": 1652369609.9820933, "compiled_sql": "\n\nSELECT\n        id as dao_id\n       ,name as dao_name\n       ,native_token\n  FROM STG_LAKE.DAO_LANDING.DAOS", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TEST_DWH.DBT_GEORGE_ANALYTICS.daos"}, "model.snowflake_dbt.dao_contracts": {"raw_sql": "{{ config(tags=[\"lookup\", \"dimension\"]) }}\r\n\r\nSELECT\r\n        id as dao_contract_id\r\n       ,dao_id\r\n       ,network\r\n       ,label\r\n       ,contract as contract_address\r\n  FROM {{ var(\"lake_db\") }}.DAO_LANDING.DAOS_CONTRACTS", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["lookup", "dimension"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "query_tag": "dbt_dao_treasuries", "post-hook": [], "pre-hook": []}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS", "fqn": ["snowflake_dbt", "landing", "dao_treasuries", "dao_contracts"], "unique_id": "model.snowflake_dbt.dao_contracts", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "landing\\dao_treasuries\\dao_contracts.sql", "original_file_path": "models\\landing\\dao_treasuries\\dao_contracts.sql", "name": "dao_contracts", "alias": "dao_contracts", "checksum": {"name": "sha256", "checksum": "fc2b14ad31527eb8f478f0f1fd0aad02f781898507c7b1110e8757ec8b3cbc04"}, "tags": ["lookup", "dimension"], "refs": [], "sources": [], "description": "The DAO Contracts table is the list of addresses that DAO's have under their control that acrue value to them. This means they are either treasury address, fee distributors, or other focused use cases.\r\n\r\nThe source table of this is owned by the Reaserch team and populated by Aaron. The landing table is located at **LAKE.DAO_LANDING.DAOS_CONTRACTS**", "columns": {"dao_contract_id": {"name": "dao_contract_id", "description": "The primary identifier of a DAO contract address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dao_id": {"name": "dao_id", "description": "The primary identifier of DAO's and joined to DAO table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The blockchain network that the contract exists on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "label": {"name": "label", "description": "The definition of contract type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "The contract address that is being tracked.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_dbt://models\\landing\\dao_treasuries\\schema.yml", "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\dao_treasuries\\dao_contracts.sql", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "sync_all_columns", "materialized": "view", "query_tag": "dbt_dao_treasuries", "tags": ["lookup", "dimension"]}, "created_at": 1652369609.9850585, "compiled_sql": "\n\nSELECT\n        id as dao_contract_id\n       ,dao_id\n       ,network\n       ,label\n       ,contract as contract_address\n  FROM STG_LAKE.DAO_LANDING.DAOS_CONTRACTS", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TEST_DWH.DBT_GEORGE_ANALYTICS.dao_contracts"}, "model.snowflake_dbt.dao_treasury_tokens": {"raw_sql": "{{ config(tags=[\"fact\"]) }}\r\n\r\nSELECT\r\n        dao_id\r\n       ,dao_contract_id\r\n       ,date\r\n       ,token_ticker\r\n       ,token_address\r\n       ,no_of_tokens\r\n       ,token_price\r\n       ,usd_value\r\n  FROM {{ var(\"lake_db\") }}.DAO_LANDING.TREASURIES_TOKENS", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["fact"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "query_tag": "dbt_dao_treasuries", "post-hook": [], "pre-hook": []}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS", "fqn": ["snowflake_dbt", "landing", "dao_treasuries", "dao_treasury_tokens"], "unique_id": "model.snowflake_dbt.dao_treasury_tokens", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "landing\\dao_treasuries\\dao_treasury_tokens.sql", "original_file_path": "models\\landing\\dao_treasuries\\dao_treasury_tokens.sql", "name": "dao_treasury_tokens", "alias": "dao_treasury_tokens", "checksum": {"name": "sha256", "checksum": "ac0bbcdf4f34d3ccab07de9ec41e5c15372dd4c51d8bf3856631b3ac4fb7e5d6"}, "tags": ["fact"], "refs": [], "sources": [], "description": "The DAO Treasury Tokens table is a granular level look at the contents of each contract address at the end of each day. This table allows us to track and graph treasury valuation and makeup over time.\r\n\r\nThis table is populated by __Pythia__ and powered by the **Covalent** API to generate daily snapshots for each contract address.", "columns": {"dao_id": {"name": "dao_id", "description": "The primary identifier for DAO's.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dao_contract_id": {"name": "dao_contract_id", "description": "The primary identifier for contract addresses tied to a DAO.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date for which the information was collected to compute Treasury Holdings.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_ticker": {"name": "token_ticker", "description": "The token symbol.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_address": {"name": "token_address", "description": "The contract address for where there token resides.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "no_of_tokens": {"name": "no_of_tokens", "description": "The total number of tokens the DAO Treasury has in its contract on the date of collection.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_price": {"name": "token_price", "description": "The USD price of the token on the date collected.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usd_value": {"name": "usd_value", "description": "The USD value is the number of tokens help by the DAO multiplied by its USD token price.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_dbt://models\\landing\\dao_treasuries\\schema.yml", "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\dao_treasuries\\dao_treasury_tokens.sql", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "sync_all_columns", "materialized": "view", "query_tag": "dbt_dao_treasuries", "tags": ["fact"]}, "created_at": 1652369609.9900932, "compiled_sql": "\n\nSELECT\n        dao_id\n       ,dao_contract_id\n       ,date\n       ,token_ticker\n       ,token_address\n       ,no_of_tokens\n       ,token_price\n       ,usd_value\n  FROM STG_LAKE.DAO_LANDING.TREASURIES_TOKENS", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TEST_DWH.DBT_GEORGE_ANALYTICS.dao_treasury_tokens"}, "model.snowflake_dbt.stg_dao_treasury_tokens": {"raw_sql": "SELECT\r\n        dao_id\r\n       ,dao_contract_id\r\n       ,date\r\n       ,token_ticker\r\n       ,token_address\r\n       ,no_of_tokens\r\n       ,no_of_tokens * pow(10, 18) as no_of_tokens_int\r\n       ,18 as no_of_tokens_decimals\r\n       ,token_price\r\n       ,token_price * pow(10, 15) as token_price_int\r\n       ,15 as token_price_decimals\r\n       ,usd_value\r\n       ,usd_value * pow(10, 9) as usd_value_int\r\n       ,9 as usd_value_decimals\r\n  FROM {{ ref('dao_treasury_tokens') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.snowflake_dbt.dao_treasury_tokens"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "query_tag": "dbt_dao_treasuries", "post-hook": [], "pre-hook": []}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS", "fqn": ["snowflake_dbt", "staging", "dao_treasuries", "stg_dao_treasury_tokens"], "unique_id": "model.snowflake_dbt.stg_dao_treasury_tokens", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "staging\\dao_treasuries\\stg_dao_treasury_tokens.sql", "original_file_path": "models\\staging\\dao_treasuries\\stg_dao_treasury_tokens.sql", "name": "stg_dao_treasury_tokens", "alias": "stg_dao_treasury_tokens", "checksum": {"name": "sha256", "checksum": "5fecc04a67d52d1c17cf02b915804740a19127731ab5722f461b7f6c8415595b"}, "tags": [], "refs": [["dao_treasury_tokens"]], "sources": [], "description": "The DAO Treasury Tokens table is a granular level look at the contents of each contract address at the end of each day.\r\n\r\nThis staging table is designed so that the values can be represented as both floating point numbers and integers. This allows for greater flexibility across different applications so that we can try and avoid any floating point computation issues once this data is served outside of Snowflake.", "columns": {"dao_id": {"name": "dao_id", "description": "The primary identifier for DAO's.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dao_contract_id": {"name": "dao_contract_id", "description": "The primary identifier for contract addresses tied to a DAO.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date for which the information was collected to compute Treasury Holdings.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_ticker": {"name": "token_ticker", "description": "The token symbol.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_address": {"name": "token_address", "description": "The contract address for where there token resides.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "no_of_tokens": {"name": "no_of_tokens", "description": "The total number of tokens the DAO Treasury has in its contract on the date of collection.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "no_of_tokens_int": {"name": "no_of_tokens_int", "description": "The total number of tokens the DAO Treasury has in its contract on the date of collection in integer format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "no_of_tokens_decimals": {"name": "no_of_tokens_decimals", "description": "The number of significant figures required to transform Number of Tokens integer back to a float.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_price": {"name": "token_price", "description": "The USD price of the token on the date collected.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_price_int": {"name": "token_price_int", "description": "The USD price of the token in integer format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_price_decimals": {"name": "token_price_decimals", "description": "The number of significant figures required to transform the token price integer back to a float.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usd_value": {"name": "usd_value", "description": "The USD value is the number of tokens help by the DAO multiplied by its USD token price.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usd_value_int": {"name": "usd_value_int", "description": "The USD value of the treasury in integer format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usd_value_decimals": {"name": "usd_value_decimals", "description": "The number of significant figures required to transform the USD value integer back to a float.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_dbt://models\\staging\\dao_treasuries\\schema.yml", "compiled_path": "target\\compiled\\snowflake_dbt\\models\\staging\\dao_treasuries\\stg_dao_treasury_tokens.sql", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "sync_all_columns", "materialized": "view", "query_tag": "dbt_dao_treasuries"}, "created_at": 1652369610.0860608, "compiled_sql": "SELECT\n        dao_id\n       ,dao_contract_id\n       ,date\n       ,token_ticker\n       ,token_address\n       ,no_of_tokens\n       ,no_of_tokens * pow(10, 18) as no_of_tokens_int\n       ,18 as no_of_tokens_decimals\n       ,token_price\n       ,token_price * pow(10, 15) as token_price_int\n       ,15 as token_price_decimals\n       ,usd_value\n       ,usd_value * pow(10, 9) as usd_value_int\n       ,9 as usd_value_decimals\n  FROM TEST_DWH.DBT_GEORGE_ANALYTICS.dao_treasury_tokens", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TEST_DWH.DBT_GEORGE_ANALYTICS.stg_dao_treasury_tokens"}, "test.snowflake_dbt.not_null_daily_token_data_id_str.0ca4b589e2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id_str", "model": "{{ get_where_subquery(ref('daily_token_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.daily_token_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "analytics", "coingecko", "not_null_daily_token_data_id_str"], "unique_id": "test.snowflake_dbt.not_null_daily_token_data_id_str.0ca4b589e2", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_daily_token_data_id_str.sql", "original_file_path": "models\\analytics\\coingecko\\schema.yml", "name": "not_null_daily_token_data_id_str", "alias": "not_null_daily_token_data_id_str", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["daily_token_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\coingecko\\schema.yml\\not_null_daily_token_data_id_str.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369609.843093, "compiled_sql": "\n    \n    \n\n\n\nselect id_str\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.daily_token_data\nwhere id_str is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id_str", "file_key_name": "models.daily_token_data"}, "test.snowflake_dbt.relationships_daily_token_data_id_str__id__ref_tokens_.333b914fe2": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('tokens')", "field": "id", "column_name": "id_str", "model": "{{ get_where_subquery(ref('daily_token_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.tokens", "model.snowflake_dbt.daily_token_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "analytics", "coingecko", "relationships_daily_token_data_id_str__id__ref_tokens_"], "unique_id": "test.snowflake_dbt.relationships_daily_token_data_id_str__id__ref_tokens_.333b914fe2", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "relationships_daily_token_data_id_str__id__ref_tokens_.sql", "original_file_path": "models\\analytics\\coingecko\\schema.yml", "name": "relationships_daily_token_data_id_str__id__ref_tokens_", "alias": "relationships_daily_token_data_id_str__id__ref_tokens_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokens"], ["daily_token_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\coingecko\\schema.yml\\relationships_daily_token_data_id_str__id__ref_tokens_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369609.8480973, "compiled_sql": "\n    \n    \n\nwith child as (\n    select id_str as from_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.daily_token_data\n    where id_str is not null\n),\n\nparent as (\n    select id as to_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.tokens\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id_str", "file_key_name": "models.daily_token_data"}, "test.snowflake_dbt.not_null_daily_token_data_symbol_str.4e590031a7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "symbol_str", "model": "{{ get_where_subquery(ref('daily_token_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.daily_token_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "analytics", "coingecko", "not_null_daily_token_data_symbol_str"], "unique_id": "test.snowflake_dbt.not_null_daily_token_data_symbol_str.4e590031a7", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_daily_token_data_symbol_str.sql", "original_file_path": "models\\analytics\\coingecko\\schema.yml", "name": "not_null_daily_token_data_symbol_str", "alias": "not_null_daily_token_data_symbol_str", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["daily_token_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\coingecko\\schema.yml\\not_null_daily_token_data_symbol_str.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369609.8640978, "compiled_sql": "\n    \n    \n\n\n\nselect symbol_str\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.daily_token_data\nwhere symbol_str is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "symbol_str", "file_key_name": "models.daily_token_data"}, "test.snowflake_dbt.not_null_daily_token_data_name_str.0ca8fcdf6c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name_str", "model": "{{ get_where_subquery(ref('daily_token_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.daily_token_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "analytics", "coingecko", "not_null_daily_token_data_name_str"], "unique_id": "test.snowflake_dbt.not_null_daily_token_data_name_str.0ca8fcdf6c", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_daily_token_data_name_str.sql", "original_file_path": "models\\analytics\\coingecko\\schema.yml", "name": "not_null_daily_token_data_name_str", "alias": "not_null_daily_token_data_name_str", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["daily_token_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\coingecko\\schema.yml\\not_null_daily_token_data_name_str.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369609.869058, "compiled_sql": "\n    \n    \n\n\n\nselect name_str\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.daily_token_data\nwhere name_str is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "name_str", "file_key_name": "models.daily_token_data"}, "test.snowflake_dbt.not_null_daily_token_data_close_dt.180354204f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "close_dt", "model": "{{ get_where_subquery(ref('daily_token_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.daily_token_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "analytics", "coingecko", "not_null_daily_token_data_close_dt"], "unique_id": "test.snowflake_dbt.not_null_daily_token_data_close_dt.180354204f", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_daily_token_data_close_dt.sql", "original_file_path": "models\\analytics\\coingecko\\schema.yml", "name": "not_null_daily_token_data_close_dt", "alias": "not_null_daily_token_data_close_dt", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["daily_token_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\coingecko\\schema.yml\\not_null_daily_token_data_close_dt.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369609.8710973, "compiled_sql": "\n    \n    \n\n\n\nselect close_dt\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.daily_token_data\nwhere close_dt is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "close_dt", "file_key_name": "models.daily_token_data"}, "test.snowflake_dbt.not_null_daily_token_data_open_dt.d748c069c9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "open_dt", "model": "{{ get_where_subquery(ref('daily_token_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.daily_token_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "analytics", "coingecko", "not_null_daily_token_data_open_dt"], "unique_id": "test.snowflake_dbt.not_null_daily_token_data_open_dt.d748c069c9", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_daily_token_data_open_dt.sql", "original_file_path": "models\\analytics\\coingecko\\schema.yml", "name": "not_null_daily_token_data_open_dt", "alias": "not_null_daily_token_data_open_dt", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["daily_token_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\coingecko\\schema.yml\\not_null_daily_token_data_open_dt.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369609.8750975, "compiled_sql": "\n    \n    \n\n\n\nselect open_dt\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.daily_token_data\nwhere open_dt is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "open_dt", "file_key_name": "models.daily_token_data"}, "test.snowflake_dbt.relationships_daily_token_data_open_dt__timestamp__ref_market_charts_.584efd0c68": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_daily_token_data_478db6b427955a07b12b4e357df35a2b\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('market_charts')", "field": "timestamp", "column_name": "open_dt", "model": "{{ get_where_subquery(ref('daily_token_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.market_charts", "model.snowflake_dbt.daily_token_data"]}, "config": {"enabled": true, "alias": "relationships_daily_token_data_478db6b427955a07b12b4e357df35a2b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "analytics", "coingecko", "relationships_daily_token_data_open_dt__timestamp__ref_market_charts_"], "unique_id": "test.snowflake_dbt.relationships_daily_token_data_open_dt__timestamp__ref_market_charts_.584efd0c68", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "relationships_daily_token_data_478db6b427955a07b12b4e357df35a2b.sql", "original_file_path": "models\\analytics\\coingecko\\schema.yml", "name": "relationships_daily_token_data_open_dt__timestamp__ref_market_charts_", "alias": "relationships_daily_token_data_478db6b427955a07b12b4e357df35a2b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["market_charts"], ["daily_token_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\coingecko\\schema.yml\\relationships_daily_token_data_478db6b427955a07b12b4e357df35a2b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_daily_token_data_478db6b427955a07b12b4e357df35a2b"}, "created_at": 1652369609.8780947, "compiled_sql": "\n    \n    \n\nwith child as (\n    select open_dt as from_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.daily_token_data\n    where open_dt is not null\n),\n\nparent as (\n    select timestamp as to_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.market_charts\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "open_dt", "file_key_name": "models.daily_token_data"}, "test.snowflake_dbt.not_null_tokens_id.5999063894": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('tokens')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.tokens"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "coingecko", "not_null_tokens_id"], "unique_id": "test.snowflake_dbt.not_null_tokens_id.5999063894", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_tokens_id.sql", "original_file_path": "models\\landing\\coingecko\\schema.yml", "name": "not_null_tokens_id", "alias": "not_null_tokens_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokens"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\coingecko\\schema.yml\\not_null_tokens_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369609.953064, "compiled_sql": "\n    \n    \n\n\n\nselect id\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.tokens\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.tokens"}, "test.snowflake_dbt.relationships_tokens_id__id__ref_market_charts_.e08e5e9989": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('market_charts')", "field": "id", "column_name": "id", "model": "{{ get_where_subquery(ref('tokens')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.market_charts", "model.snowflake_dbt.tokens"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "coingecko", "relationships_tokens_id__id__ref_market_charts_"], "unique_id": "test.snowflake_dbt.relationships_tokens_id__id__ref_market_charts_.e08e5e9989", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "relationships_tokens_id__id__ref_market_charts_.sql", "original_file_path": "models\\landing\\coingecko\\schema.yml", "name": "relationships_tokens_id__id__ref_market_charts_", "alias": "relationships_tokens_id__id__ref_market_charts_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["market_charts"], ["tokens"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\coingecko\\schema.yml\\relationships_tokens_id__id__ref_market_charts_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369609.9560943, "compiled_sql": "\n    \n    \n\nwith child as (\n    select id as from_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.tokens\n    where id is not null\n),\n\nparent as (\n    select id as to_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.market_charts\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.tokens"}, "test.snowflake_dbt.not_null_tokens_symbol.6e96754fee": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "symbol", "model": "{{ get_where_subquery(ref('tokens')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.tokens"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "coingecko", "not_null_tokens_symbol"], "unique_id": "test.snowflake_dbt.not_null_tokens_symbol.6e96754fee", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_tokens_symbol.sql", "original_file_path": "models\\landing\\coingecko\\schema.yml", "name": "not_null_tokens_symbol", "alias": "not_null_tokens_symbol", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokens"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\coingecko\\schema.yml\\not_null_tokens_symbol.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369609.9630942, "compiled_sql": "\n    \n    \n\n\n\nselect symbol\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.tokens\nwhere symbol is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "symbol", "file_key_name": "models.tokens"}, "test.snowflake_dbt.not_null_tokens_name.e39e09a9dd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('tokens')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.tokens"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "coingecko", "not_null_tokens_name"], "unique_id": "test.snowflake_dbt.not_null_tokens_name.e39e09a9dd", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_tokens_name.sql", "original_file_path": "models\\landing\\coingecko\\schema.yml", "name": "not_null_tokens_name", "alias": "not_null_tokens_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokens"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\coingecko\\schema.yml\\not_null_tokens_name.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369609.966094, "compiled_sql": "\n    \n    \n\n\n\nselect name\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.tokens\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "name", "file_key_name": "models.tokens"}, "test.snowflake_dbt.not_null_market_charts_id.fefa911bfe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('market_charts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.market_charts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "coingecko", "not_null_market_charts_id"], "unique_id": "test.snowflake_dbt.not_null_market_charts_id.fefa911bfe", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_market_charts_id.sql", "original_file_path": "models\\landing\\coingecko\\schema.yml", "name": "not_null_market_charts_id", "alias": "not_null_market_charts_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["market_charts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\coingecko\\schema.yml\\not_null_market_charts_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369609.9680939, "compiled_sql": "\n    \n    \n\n\n\nselect id\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.market_charts\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.market_charts"}, "test.snowflake_dbt.relationships_market_charts_id__id__ref_tokens_.03d2a212fb": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('tokens')", "field": "id", "column_name": "id", "model": "{{ get_where_subquery(ref('market_charts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.tokens", "model.snowflake_dbt.market_charts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "coingecko", "relationships_market_charts_id__id__ref_tokens_"], "unique_id": "test.snowflake_dbt.relationships_market_charts_id__id__ref_tokens_.03d2a212fb", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "relationships_market_charts_id__id__ref_tokens_.sql", "original_file_path": "models\\landing\\coingecko\\schema.yml", "name": "relationships_market_charts_id__id__ref_tokens_", "alias": "relationships_market_charts_id__id__ref_tokens_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokens"], ["market_charts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\coingecko\\schema.yml\\relationships_market_charts_id__id__ref_tokens_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369609.9710956, "compiled_sql": "\n    \n    \n\nwith child as (\n    select id as from_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.market_charts\n    where id is not null\n),\n\nparent as (\n    select id as to_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.tokens\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.market_charts"}, "test.snowflake_dbt.not_null_market_charts_timestamp.e7ca812b2c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "timestamp", "model": "{{ get_where_subquery(ref('market_charts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.market_charts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "coingecko", "not_null_market_charts_timestamp"], "unique_id": "test.snowflake_dbt.not_null_market_charts_timestamp.e7ca812b2c", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_market_charts_timestamp.sql", "original_file_path": "models\\landing\\coingecko\\schema.yml", "name": "not_null_market_charts_timestamp", "alias": "not_null_market_charts_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["market_charts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\coingecko\\schema.yml\\not_null_market_charts_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369609.9780958, "compiled_sql": "\n    \n    \n\n\n\nselect timestamp\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.market_charts\nwhere timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "timestamp", "file_key_name": "models.market_charts"}, "test.snowflake_dbt.unique_daos_dao_id.9f0c55c70a": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "dao_id", "model": "{{ get_where_subquery(ref('daos')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.daos"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "dao_treasuries", "unique_daos_dao_id"], "unique_id": "test.snowflake_dbt.unique_daos_dao_id.9f0c55c70a", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "unique_daos_dao_id.sql", "original_file_path": "models\\landing\\dao_treasuries\\schema.yml", "name": "unique_daos_dao_id", "alias": "unique_daos_dao_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["daos"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\dao_treasuries\\schema.yml\\unique_daos_dao_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369609.9910934, "compiled_sql": "\n    \n    \n\nselect\n    dao_id as unique_field,\n    count(*) as n_records\n\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.daos\nwhere dao_id is not null\ngroup by dao_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dao_id", "file_key_name": "models.daos"}, "test.snowflake_dbt.not_null_daos_dao_id.91f9406316": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dao_id", "model": "{{ get_where_subquery(ref('daos')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.daos"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "dao_treasuries", "not_null_daos_dao_id"], "unique_id": "test.snowflake_dbt.not_null_daos_dao_id.91f9406316", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_daos_dao_id.sql", "original_file_path": "models\\landing\\dao_treasuries\\schema.yml", "name": "not_null_daos_dao_id", "alias": "not_null_daos_dao_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["daos"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\dao_treasuries\\schema.yml\\not_null_daos_dao_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369609.9940953, "compiled_sql": "\n    \n    \n\n\n\nselect dao_id\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.daos\nwhere dao_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dao_id", "file_key_name": "models.daos"}, "test.snowflake_dbt.unique_dao_contracts_dao_contract_id.b6db050831": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "dao_contract_id", "model": "{{ get_where_subquery(ref('dao_contracts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.dao_contracts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "dao_treasuries", "unique_dao_contracts_dao_contract_id"], "unique_id": "test.snowflake_dbt.unique_dao_contracts_dao_contract_id.b6db050831", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "unique_dao_contracts_dao_contract_id.sql", "original_file_path": "models\\landing\\dao_treasuries\\schema.yml", "name": "unique_dao_contracts_dao_contract_id", "alias": "unique_dao_contracts_dao_contract_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dao_contracts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\dao_treasuries\\schema.yml\\unique_dao_contracts_dao_contract_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369609.996096, "compiled_sql": "\n    \n    \n\nselect\n    dao_contract_id as unique_field,\n    count(*) as n_records\n\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.dao_contracts\nwhere dao_contract_id is not null\ngroup by dao_contract_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dao_contract_id", "file_key_name": "models.dao_contracts"}, "test.snowflake_dbt.not_null_dao_contracts_dao_contract_id.b1e48525bc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dao_contract_id", "model": "{{ get_where_subquery(ref('dao_contracts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.dao_contracts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "dao_treasuries", "not_null_dao_contracts_dao_contract_id"], "unique_id": "test.snowflake_dbt.not_null_dao_contracts_dao_contract_id.b1e48525bc", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_dao_contracts_dao_contract_id.sql", "original_file_path": "models\\landing\\dao_treasuries\\schema.yml", "name": "not_null_dao_contracts_dao_contract_id", "alias": "not_null_dao_contracts_dao_contract_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dao_contracts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\dao_treasuries\\schema.yml\\not_null_dao_contracts_dao_contract_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369609.999093, "compiled_sql": "\n    \n    \n\n\n\nselect dao_contract_id\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.dao_contracts\nwhere dao_contract_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dao_contract_id", "file_key_name": "models.dao_contracts"}, "test.snowflake_dbt.not_null_dao_contracts_dao_id.00873314fd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dao_id", "model": "{{ get_where_subquery(ref('dao_contracts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.dao_contracts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "dao_treasuries", "not_null_dao_contracts_dao_id"], "unique_id": "test.snowflake_dbt.not_null_dao_contracts_dao_id.00873314fd", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_dao_contracts_dao_id.sql", "original_file_path": "models\\landing\\dao_treasuries\\schema.yml", "name": "not_null_dao_contracts_dao_id", "alias": "not_null_dao_contracts_dao_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dao_contracts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\dao_treasuries\\schema.yml\\not_null_dao_contracts_dao_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369610.0020585, "compiled_sql": "\n    \n    \n\n\n\nselect dao_id\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.dao_contracts\nwhere dao_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dao_id", "file_key_name": "models.dao_contracts"}, "test.snowflake_dbt.relationships_dao_contracts_dao_id__dao_id__ref_daos_.9c88316a19": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('daos')", "field": "dao_id", "column_name": "dao_id", "model": "{{ get_where_subquery(ref('dao_contracts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.daos", "model.snowflake_dbt.dao_contracts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "dao_treasuries", "relationships_dao_contracts_dao_id__dao_id__ref_daos_"], "unique_id": "test.snowflake_dbt.relationships_dao_contracts_dao_id__dao_id__ref_daos_.9c88316a19", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "relationships_dao_contracts_dao_id__dao_id__ref_daos_.sql", "original_file_path": "models\\landing\\dao_treasuries\\schema.yml", "name": "relationships_dao_contracts_dao_id__dao_id__ref_daos_", "alias": "relationships_dao_contracts_dao_id__dao_id__ref_daos_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["daos"], ["dao_contracts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\dao_treasuries\\schema.yml\\relationships_dao_contracts_dao_id__dao_id__ref_daos_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369610.0040932, "compiled_sql": "\n    \n    \n\nwith child as (\n    select dao_id as from_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.dao_contracts\n    where dao_id is not null\n),\n\nparent as (\n    select dao_id as to_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.daos\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dao_id", "file_key_name": "models.dao_contracts"}, "test.snowflake_dbt.not_null_dao_contracts_network.7bdae210cf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "network", "model": "{{ get_where_subquery(ref('dao_contracts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.dao_contracts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "dao_treasuries", "not_null_dao_contracts_network"], "unique_id": "test.snowflake_dbt.not_null_dao_contracts_network.7bdae210cf", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_dao_contracts_network.sql", "original_file_path": "models\\landing\\dao_treasuries\\schema.yml", "name": "not_null_dao_contracts_network", "alias": "not_null_dao_contracts_network", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dao_contracts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\dao_treasuries\\schema.yml\\not_null_dao_contracts_network.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369610.0110931, "compiled_sql": "\n    \n    \n\n\n\nselect network\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.dao_contracts\nwhere network is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "network", "file_key_name": "models.dao_contracts"}, "test.snowflake_dbt.accepted_values_dao_contracts_network__ethereum__polygon.1e1788ea24": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["ethereum", "polygon"], "column_name": "network", "model": "{{ get_where_subquery(ref('dao_contracts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.dao_contracts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "dao_treasuries", "accepted_values_dao_contracts_network__ethereum__polygon"], "unique_id": "test.snowflake_dbt.accepted_values_dao_contracts_network__ethereum__polygon.1e1788ea24", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "accepted_values_dao_contracts_network__ethereum__polygon.sql", "original_file_path": "models\\landing\\dao_treasuries\\schema.yml", "name": "accepted_values_dao_contracts_network__ethereum__polygon", "alias": "accepted_values_dao_contracts_network__ethereum__polygon", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dao_contracts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\dao_treasuries\\schema.yml\\accepted_values_dao_contracts_network__ethereum__polygon.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369610.013094, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        network as value_field,\n        count(*) as n_records\n\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.dao_contracts\n    group by network\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'ethereum','polygon'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "network", "file_key_name": "models.dao_contracts"}, "test.snowflake_dbt.not_null_dao_contracts_label.82ae0ec997": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "label", "model": "{{ get_where_subquery(ref('dao_contracts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.dao_contracts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "dao_treasuries", "not_null_dao_contracts_label"], "unique_id": "test.snowflake_dbt.not_null_dao_contracts_label.82ae0ec997", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_dao_contracts_label.sql", "original_file_path": "models\\landing\\dao_treasuries\\schema.yml", "name": "not_null_dao_contracts_label", "alias": "not_null_dao_contracts_label", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dao_contracts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\dao_treasuries\\schema.yml\\not_null_dao_contracts_label.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369610.019096, "compiled_sql": "\n    \n    \n\n\n\nselect label\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.dao_contracts\nwhere label is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "label", "file_key_name": "models.dao_contracts"}, "test.snowflake_dbt.accepted_values_dao_contracts_label__treasury__fee_distributer__treasury_ops.55652b6c9b": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dao_contracts_9a7e934f97103b3c5c8717b5783f40c6\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["treasury", "fee distributer", "treasury ops"], "column_name": "label", "model": "{{ get_where_subquery(ref('dao_contracts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.dao_contracts"]}, "config": {"enabled": true, "alias": "accepted_values_dao_contracts_9a7e934f97103b3c5c8717b5783f40c6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "dao_treasuries", "accepted_values_dao_contracts_label__treasury__fee_distributer__treasury_ops"], "unique_id": "test.snowflake_dbt.accepted_values_dao_contracts_label__treasury__fee_distributer__treasury_ops.55652b6c9b", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "accepted_values_dao_contracts_9a7e934f97103b3c5c8717b5783f40c6.sql", "original_file_path": "models\\landing\\dao_treasuries\\schema.yml", "name": "accepted_values_dao_contracts_label__treasury__fee_distributer__treasury_ops", "alias": "accepted_values_dao_contracts_9a7e934f97103b3c5c8717b5783f40c6", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dao_contracts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\dao_treasuries\\schema.yml\\accepted_values_dao_contracts_9a7e934f97103b3c5c8717b5783f40c6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_dao_contracts_9a7e934f97103b3c5c8717b5783f40c6"}, "created_at": 1652369610.022093, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        label as value_field,\n        count(*) as n_records\n\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.dao_contracts\n    group by label\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'treasury','fee distributer','treasury ops'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "label", "file_key_name": "models.dao_contracts"}, "test.snowflake_dbt.unique_dao_contracts_contract_address.e08d0c7268": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "contract_address", "model": "{{ get_where_subquery(ref('dao_contracts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.dao_contracts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "dao_treasuries", "unique_dao_contracts_contract_address"], "unique_id": "test.snowflake_dbt.unique_dao_contracts_contract_address.e08d0c7268", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "unique_dao_contracts_contract_address.sql", "original_file_path": "models\\landing\\dao_treasuries\\schema.yml", "name": "unique_dao_contracts_contract_address", "alias": "unique_dao_contracts_contract_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dao_contracts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\dao_treasuries\\schema.yml\\unique_dao_contracts_contract_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369610.0290825, "compiled_sql": "\n    \n    \n\nselect\n    contract_address as unique_field,\n    count(*) as n_records\n\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.dao_contracts\nwhere contract_address is not null\ngroup by contract_address\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "contract_address", "file_key_name": "models.dao_contracts"}, "test.snowflake_dbt.not_null_dao_contracts_contract_address.1c043bbe7d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contract_address", "model": "{{ get_where_subquery(ref('dao_contracts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.dao_contracts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "dao_treasuries", "not_null_dao_contracts_contract_address"], "unique_id": "test.snowflake_dbt.not_null_dao_contracts_contract_address.1c043bbe7d", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_dao_contracts_contract_address.sql", "original_file_path": "models\\landing\\dao_treasuries\\schema.yml", "name": "not_null_dao_contracts_contract_address", "alias": "not_null_dao_contracts_contract_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dao_contracts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\dao_treasuries\\schema.yml\\not_null_dao_contracts_contract_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369610.0320818, "compiled_sql": "\n    \n    \n\n\n\nselect contract_address\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.dao_contracts\nwhere contract_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "contract_address", "file_key_name": "models.dao_contracts"}, "test.snowflake_dbt.not_null_dao_treasury_tokens_dao_id.0e0f4be0c9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dao_id", "model": "{{ get_where_subquery(ref('dao_treasury_tokens')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.dao_treasury_tokens"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "dao_treasuries", "not_null_dao_treasury_tokens_dao_id"], "unique_id": "test.snowflake_dbt.not_null_dao_treasury_tokens_dao_id.0e0f4be0c9", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_dao_treasury_tokens_dao_id.sql", "original_file_path": "models\\landing\\dao_treasuries\\schema.yml", "name": "not_null_dao_treasury_tokens_dao_id", "alias": "not_null_dao_treasury_tokens_dao_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dao_treasury_tokens"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\dao_treasuries\\schema.yml\\not_null_dao_treasury_tokens_dao_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369610.0350592, "compiled_sql": "\n    \n    \n\n\n\nselect dao_id\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.dao_treasury_tokens\nwhere dao_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dao_id", "file_key_name": "models.dao_treasury_tokens"}, "test.snowflake_dbt.relationships_dao_treasury_tokens_dao_id__dao_id__ref_daos_.6e135d6ca7": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('daos')", "field": "dao_id", "column_name": "dao_id", "model": "{{ get_where_subquery(ref('dao_treasury_tokens')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.daos", "model.snowflake_dbt.dao_treasury_tokens"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "dao_treasuries", "relationships_dao_treasury_tokens_dao_id__dao_id__ref_daos_"], "unique_id": "test.snowflake_dbt.relationships_dao_treasury_tokens_dao_id__dao_id__ref_daos_.6e135d6ca7", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "relationships_dao_treasury_tokens_dao_id__dao_id__ref_daos_.sql", "original_file_path": "models\\landing\\dao_treasuries\\schema.yml", "name": "relationships_dao_treasury_tokens_dao_id__dao_id__ref_daos_", "alias": "relationships_dao_treasury_tokens_dao_id__dao_id__ref_daos_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["daos"], ["dao_treasury_tokens"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\dao_treasuries\\schema.yml\\relationships_dao_treasury_tokens_dao_id__dao_id__ref_daos_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369610.0370967, "compiled_sql": "\n    \n    \n\nwith child as (\n    select dao_id as from_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.dao_treasury_tokens\n    where dao_id is not null\n),\n\nparent as (\n    select dao_id as to_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.daos\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dao_id", "file_key_name": "models.dao_treasury_tokens"}, "test.snowflake_dbt.not_null_dao_treasury_tokens_dao_contract_id.72ec100be1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dao_contract_id", "model": "{{ get_where_subquery(ref('dao_treasury_tokens')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.dao_treasury_tokens"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "dao_treasuries", "not_null_dao_treasury_tokens_dao_contract_id"], "unique_id": "test.snowflake_dbt.not_null_dao_treasury_tokens_dao_contract_id.72ec100be1", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_dao_treasury_tokens_dao_contract_id.sql", "original_file_path": "models\\landing\\dao_treasuries\\schema.yml", "name": "not_null_dao_treasury_tokens_dao_contract_id", "alias": "not_null_dao_treasury_tokens_dao_contract_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dao_treasury_tokens"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\dao_treasuries\\schema.yml\\not_null_dao_treasury_tokens_dao_contract_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369610.0440965, "compiled_sql": "\n    \n    \n\n\n\nselect dao_contract_id\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.dao_treasury_tokens\nwhere dao_contract_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dao_contract_id", "file_key_name": "models.dao_treasury_tokens"}, "test.snowflake_dbt.relationships_dao_treasury_tokens_dao_contract_id__dao_contract_id__ref_dao_contracts_.76ef459d76": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dao_treasury_tok_e4be737f4a1342477b8684280513b4e9\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dao_contracts')", "field": "dao_contract_id", "column_name": "dao_contract_id", "model": "{{ get_where_subquery(ref('dao_treasury_tokens')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.dao_contracts", "model.snowflake_dbt.dao_treasury_tokens"]}, "config": {"enabled": true, "alias": "relationships_dao_treasury_tok_e4be737f4a1342477b8684280513b4e9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "dao_treasuries", "relationships_dao_treasury_tokens_dao_contract_id__dao_contract_id__ref_dao_contracts_"], "unique_id": "test.snowflake_dbt.relationships_dao_treasury_tokens_dao_contract_id__dao_contract_id__ref_dao_contracts_.76ef459d76", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "relationships_dao_treasury_tok_e4be737f4a1342477b8684280513b4e9.sql", "original_file_path": "models\\landing\\dao_treasuries\\schema.yml", "name": "relationships_dao_treasury_tokens_dao_contract_id__dao_contract_id__ref_dao_contracts_", "alias": "relationships_dao_treasury_tok_e4be737f4a1342477b8684280513b4e9", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dao_contracts"], ["dao_treasury_tokens"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\dao_treasuries\\schema.yml\\relationships_dao_treasury_tok_e4be737f4a1342477b8684280513b4e9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_dao_treasury_tok_e4be737f4a1342477b8684280513b4e9"}, "created_at": 1652369610.0460987, "compiled_sql": "\n    \n    \n\nwith child as (\n    select dao_contract_id as from_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.dao_treasury_tokens\n    where dao_contract_id is not null\n),\n\nparent as (\n    select dao_contract_id as to_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.dao_contracts\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dao_contract_id", "file_key_name": "models.dao_treasury_tokens"}, "test.snowflake_dbt.not_null_dao_treasury_tokens_date.50eaacc3cf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('dao_treasury_tokens')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.dao_treasury_tokens"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "dao_treasuries", "not_null_dao_treasury_tokens_date"], "unique_id": "test.snowflake_dbt.not_null_dao_treasury_tokens_date.50eaacc3cf", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_dao_treasury_tokens_date.sql", "original_file_path": "models\\landing\\dao_treasuries\\schema.yml", "name": "not_null_dao_treasury_tokens_date", "alias": "not_null_dao_treasury_tokens_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dao_treasury_tokens"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\dao_treasuries\\schema.yml\\not_null_dao_treasury_tokens_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652369610.0540931, "compiled_sql": "\n    \n    \n\n\n\nselect date\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.dao_treasury_tokens\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.dao_treasury_tokens"}, "model.snowflake_dbt.chains": {"raw_sql": "{{ config(tags=[\"lookup\", \"dimension\"]) }}\r\n\r\nSELECT\r\n       ID\r\n       ,NAME\r\n       ,CHAIN_ID\r\n  FROM {{ var(\"lake_db\") }}.CHAIN_DETAILS.CHAINS", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["lookup", "dimension"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "query_tag": "dbt_landing", "post-hook": [], "pre-hook": []}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS", "fqn": ["snowflake_dbt", "landing", "chain_details", "chains"], "unique_id": "model.snowflake_dbt.chains", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "landing\\chain_details\\chains.sql", "original_file_path": "models\\landing\\chain_details\\chains.sql", "name": "chains", "alias": "chains", "checksum": {"name": "sha256", "checksum": "f68c110dcb53d6ae7dff3994d22255c2c2fa44e0f3bf01011b3f85d50481a935"}, "tags": ["lookup", "dimension"], "refs": [], "sources": [], "description": "This is a lookup table for chains and their EVM chain IDs + lookup IDs.\r\n\r\nThis table is maintained by the data team.", "columns": {"id": {"name": "id", "description": "Simple lookup ID that adds 1 for each new chain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Chain name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "EVM chain ID", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_dbt://models\\landing\\chain_details\\schema.yml", "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\chain_details\\chains.sql", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "sync_all_columns", "materialized": "view", "query_tag": "dbt_landing", "tags": ["lookup", "dimension"]}, "created_at": 1652370288.907984, "compiled_sql": "\n\nSELECT\n       ID\n       ,NAME\n       ,CHAIN_ID\n  FROM STG_LAKE.CHAIN_DETAILS.CHAINS", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TEST_DWH.DBT_GEORGE_ANALYTICS.chains"}, "test.snowflake_dbt.unique_chains_id.33bb2f5e05": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('chains')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.chains"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "chain_details", "unique_chains_id"], "unique_id": "test.snowflake_dbt.unique_chains_id.33bb2f5e05", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "unique_chains_id.sql", "original_file_path": "models\\landing\\chain_details\\schema.yml", "name": "unique_chains_id", "alias": "unique_chains_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["chains"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\chain_details\\schema.yml\\unique_chains_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652370288.9149866, "compiled_sql": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.chains\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.chains"}, "test.snowflake_dbt.not_null_chains_id.3db750ce1c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('chains')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.chains"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "chain_details", "not_null_chains_id"], "unique_id": "test.snowflake_dbt.not_null_chains_id.3db750ce1c", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_chains_id.sql", "original_file_path": "models\\landing\\chain_details\\schema.yml", "name": "not_null_chains_id", "alias": "not_null_chains_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["chains"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\chain_details\\schema.yml\\not_null_chains_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652370288.9179828, "compiled_sql": "\n    \n    \n\n\n\nselect id\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.chains\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.chains"}, "test.snowflake_dbt.not_null_chains_name.ce1cda53df": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('chains')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.chains"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "chain_details", "not_null_chains_name"], "unique_id": "test.snowflake_dbt.not_null_chains_name.ce1cda53df", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_chains_name.sql", "original_file_path": "models\\landing\\chain_details\\schema.yml", "name": "not_null_chains_name", "alias": "not_null_chains_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["chains"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\chain_details\\schema.yml\\not_null_chains_name.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652370288.9199836, "compiled_sql": "\n    \n    \n\n\n\nselect name\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.chains\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "name", "file_key_name": "models.chains"}, "test.snowflake_dbt.unique_chains_name.3d7ff371c0": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('chains')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.chains"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "chain_details", "unique_chains_name"], "unique_id": "test.snowflake_dbt.unique_chains_name.3d7ff371c0", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "unique_chains_name.sql", "original_file_path": "models\\landing\\chain_details\\schema.yml", "name": "unique_chains_name", "alias": "unique_chains_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["chains"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\chain_details\\schema.yml\\unique_chains_name.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652370288.9219854, "compiled_sql": "\n    \n    \n\nselect\n    name as unique_field,\n    count(*) as n_records\n\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.chains\nwhere name is not null\ngroup by name\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "name", "file_key_name": "models.chains"}, "test.snowflake_dbt.unique_chains_chain_id.592144dd73": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "chain_id", "model": "{{ get_where_subquery(ref('chains')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.chains"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "chain_details", "unique_chains_chain_id"], "unique_id": "test.snowflake_dbt.unique_chains_chain_id.592144dd73", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "unique_chains_chain_id.sql", "original_file_path": "models\\landing\\chain_details\\schema.yml", "name": "unique_chains_chain_id", "alias": "unique_chains_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["chains"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\chain_details\\schema.yml\\unique_chains_chain_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652370288.9239857, "compiled_sql": "\n    \n    \n\nselect\n    chain_id as unique_field,\n    count(*) as n_records\n\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.chains\nwhere chain_id is not null\ngroup by chain_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "chain_id", "file_key_name": "models.chains"}, "model.snowflake_dbt.treasury_value_by_day": {"raw_sql": "{{\r\n    config(\r\n        materialized='incremental'\r\n    )\r\n}}\r\n\r\nwith daos as (\r\n    SELECT * FROM {{ ref('daos') }}\r\n),\r\ndao_contracts as (\r\n    SELECT * FROM {{ ref('dao_contracts') }}\r\n),\r\ntreasury_tokens as (\r\n    SELECT * FROM {{ ref('stg_dao_treasury_tokens') }}\r\n),\r\nfinal as (\r\n    SELECT  \r\n            d.dao_id\r\n           ,dc.dao_contract_id\r\n           ,d.dao_name\r\n           ,d.native_token\r\n           ,dc.network\r\n           ,dc.label\r\n           ,dc.contract_address\r\n           ,tt.date\r\n           ,tt.token_ticker\r\n           ,tt.token_address\r\n           ,tt.no_of_tokens\r\n           ,tt.no_of_tokens_int\r\n           ,tt.no_of_tokens_decimals\r\n           ,tt.token_price\r\n           ,tt.token_price_int\r\n           ,tt.token_price_decimals\r\n           ,tt.usd_value\r\n           ,tt.usd_value_int\r\n           ,tt.usd_value_decimals\r\n      FROM daos d\r\n      LEFT JOIN dao_contracts dc USING (dao_id)\r\n      LEFT JOIN treasury_tokens tt USING (dao_id, dao_contract_id)\r\n    {% if is_incremental() %}\r\n        WHERE tt.date > (select max(tt.date) from treasury_tokens tt)\r\n    {% endif %}\r\n)\r\nSELECT * FROM final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.snowflake_dbt.daos", "model.snowflake_dbt.dao_contracts", "model.snowflake_dbt.stg_dao_treasury_tokens"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "transient": false, "query_tag": "dbt_dao_treasuries", "post-hook": [], "pre-hook": []}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS", "fqn": ["snowflake_dbt", "analytics", "dao_treasuries", "treasury_value_by_day"], "unique_id": "model.snowflake_dbt.treasury_value_by_day", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "analytics\\dao_treasuries\\treasury_value_by_day.sql", "original_file_path": "models\\analytics\\dao_treasuries\\treasury_value_by_day.sql", "name": "treasury_value_by_day", "alias": "treasury_value_by_day", "checksum": {"name": "sha256", "checksum": "b2c535e2737763e2bd8c2ff0969355dcf98d230b4f337f9f0225ce52f6b6f570"}, "tags": [], "refs": [["daos"], ["dao_contracts"], ["stg_dao_treasury_tokens"]], "sources": [], "description": "This table joins all the lookup tables to provide descriptive descriptions for the granular level of details that each treasury contract holds. This table is where end users should look to find information on DAO Treasury valuations over time.", "columns": {"dao_id": {"name": "dao_id", "description": "The primary identifier for DAO's.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dao_contract_id": {"name": "dao_contract_id", "description": "The primary identifier of a DAO contract address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dao_name": {"name": "dao_name", "description": "The name of the DAO.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "native_token": {"name": "native_token", "description": "The token name of the DAO", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The blockchain network that the contract exists on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "label": {"name": "label", "description": "The definition of contract type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "The contract address that is being tracked.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date for which the information was collected to compute Treasury Holdings.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_ticker": {"name": "token_ticker", "description": "The token symbol.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_address": {"name": "token_address", "description": "The contract address for where there token resides.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "no_of_tokens": {"name": "no_of_tokens", "description": "The total number of tokens the DAO Treasury has in its contract on the date of collection.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "no_of_tokens_int": {"name": "no_of_tokens_int", "description": "The total number of tokens the DAO Treasury has in its contract on the date of collection in integer format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "no_of_tokens_decimals": {"name": "no_of_tokens_decimals", "description": "The number of significant figures required to transform Number of Tokens integer back to a float.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_price": {"name": "token_price", "description": "The USD price of the token on the date collected.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_price_int": {"name": "token_price_int", "description": "The USD price of the token in integer format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_price_decimals": {"name": "token_price_decimals", "description": "The number of significant figures required to transform the token price integer back to a float.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usd_value": {"name": "usd_value", "description": "The USD value is the number of tokens help by the DAO multiplied by its USD token price.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usd_value_int": {"name": "usd_value_int", "description": "The USD value of the treasury in integer format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usd_value_decimals": {"name": "usd_value_decimals", "description": "The number of significant figures required to transform the USD value integer back to a float.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_dbt://models\\analytics\\dao_treasuries\\schema.yml", "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\dao_treasuries\\treasury_value_by_day.sql", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "sync_all_columns", "materialized": "incremental", "transient": false, "query_tag": "dbt_dao_treasuries"}, "created_at": 1653048395.9612646, "compiled_sql": "\n\nwith daos as (\n    SELECT * FROM TEST_DWH.DBT_GEORGE_ANALYTICS.daos\n),\ndao_contracts as (\n    SELECT * FROM TEST_DWH.DBT_GEORGE_ANALYTICS.dao_contracts\n),\ntreasury_tokens as (\n    SELECT * FROM TEST_DWH.DBT_GEORGE_ANALYTICS.stg_dao_treasury_tokens\n),\nfinal as (\n    SELECT  \n            d.dao_id\n           ,dc.dao_contract_id\n           ,d.dao_name\n           ,d.native_token\n           ,dc.network\n           ,dc.label\n           ,dc.contract_address\n           ,tt.date\n           ,tt.token_ticker\n           ,tt.token_address\n           ,tt.no_of_tokens\n           ,tt.no_of_tokens_int\n           ,tt.no_of_tokens_decimals\n           ,tt.token_price\n           ,tt.token_price_int\n           ,tt.token_price_decimals\n           ,tt.usd_value\n           ,tt.usd_value_int\n           ,tt.usd_value_decimals\n      FROM daos d\n      LEFT JOIN dao_contracts dc USING (dao_id)\n      LEFT JOIN treasury_tokens tt USING (dao_id, dao_contract_id)\n    \n        WHERE tt.date > (select max(tt.date) from treasury_tokens tt)\n    \n)\nSELECT * FROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TEST_DWH.DBT_GEORGE_ANALYTICS.treasury_value_by_day"}, "model.snowflake_dbt.dex_day_data": {"raw_sql": "{{\r\n    config(\r\n        materialized='table'\r\n    )\r\n}}\r\n\r\nwith uniswapv2_day_data as (\r\n    SELECT *\r\n        ,COALESCE(TX_COUNT_CUMULATIVE - lag(TX_COUNT_CUMULATIVE) over (order by date), TX_COUNT_CUMULATIVE) as TX_COUNT\r\n        ,'uniswapv2' as PROTOCOL\r\n     FROM {{ ref('uniswapv2_day_data') }}\r\n),\r\nuniswapv3_day_data as (\r\n    SELECT *\r\n        ,COALESCE(TX_COUNT_CUMULATIVE - lag(TX_COUNT_CUMULATIVE) over (order by date), TX_COUNT_CUMULATIVE) as TX_COUNT\r\n        ,'uniswapv3' as PROTOCOL\r\n    FROM {{ ref('uniswapv3_day_data') }}\r\n),\r\nsushiswap_day_data as (\r\n    SELECT *\r\n        ,COALESCE(TX_COUNT_CUMULATIVE - lag(TX_COUNT_CUMULATIVE) over (order by date), TX_COUNT_CUMULATIVE) as TX_COUNT\r\n        ,'sushiswap' as PROTOCOL\r\n    FROM {{ ref('sushiswap_day_data') }}\r\n),\r\nterraswap_day_data as (\r\n    select date as DATE_DT\r\n        ,'terraswap' as PROTOCOL_NAME_STR\r\n        ,'terra' as CHAIN_NAME_STR\r\n        ,NULL as CHAIN_ID_NBR\r\n        ,TVL_USD AS TVL_USD_NBR\r\n        ,VOLUME_USD AS VOLUME_USD_NBR\r\n        ,FEES_USD AS FEES_USD_NBR\r\n        ,TX_COUNT AS TX_COUNT_NBR\r\n        ,SUM (TX_COUNT) OVER (ORDER BY DATE) AS TX_COUNT_CUMULATIVE_NBR\r\n    FROM  {{ ref('terraswap_day_data') }}\r\n    -- WHERE DATE < '2022-05-01'\r\n),\r\nchains as (\r\n    SELECT *\r\n    FROM {{ ref('chains') }}\r\n)\r\n\r\nSELECT *\r\nFROM (\r\n    SELECT DATE AS DATE_DT\r\n        ,PROTOCOL as PROTOCOL_NAME_STR\r\n        ,c.NAME AS CHAIN_NAME_STR\r\n        ,t.CHAIN_ID AS CHAIN_ID_NBR\r\n        ,TVL_USD AS TVL_USD_NBR\r\n        ,VOLUME_USD AS VOLUME_USD_NBR\r\n        ,FEES_USD AS FEES_USD_NBR\r\n        ,TX_COUNT AS TX_COUNT_NBR\r\n        ,TX_COUNT_CUMULATIVE AS TX_COUNT_CUMULATIVE_NBR\r\n    FROM (\r\n        SELECT *\r\n        FROM uniswapv2_day_data\r\n        UNION\r\n        SELECT *\r\n        FROM uniswapv3_day_data\r\n        UNION\r\n        SELECT *\r\n        FROM sushiswap_day_data) as t\r\nLEFT JOIN chains as c\r\nON t.CHAIN_ID = c.CHAIN_ID)\r\nUNION\r\nSELECT *\r\nFROM terraswap_day_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.snowflake_dbt.uniswapv2_day_data", "model.snowflake_dbt.uniswapv3_day_data", "model.snowflake_dbt.sushiswap_day_data", "model.snowflake_dbt.terraswap_day_data", "model.snowflake_dbt.chains"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "transient": false, "query_tag": "dbt_transformed", "post-hook": [], "pre-hook": []}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS", "fqn": ["snowflake_dbt", "analytics", "dex", "dex_day_data"], "unique_id": "model.snowflake_dbt.dex_day_data", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "analytics\\dex\\dex_day_data.sql", "original_file_path": "models\\analytics\\dex\\dex_day_data.sql", "name": "dex_day_data", "alias": "dex_day_data", "checksum": {"name": "sha256", "checksum": "f2cb819e08b0465f8f7195761f109021942998904225bcc2299ecaf20f755dff"}, "tags": [], "refs": [["uniswapv2_day_data"], ["uniswapv3_day_data"], ["sushiswap_day_data"], ["terraswap_day_data"], ["chains"]], "sources": [], "description": "This table unions the seperete day_data table for each dex into one table, containing summary stats on each dex on each chain.\r\n\r\nCurrently contains uniswapv2/v3 and sushiswap on Ethereum.\r\n\r\nThis table is owned by George @gtsarfang.", "columns": {"date_dt": {"name": "date_dt", "description": "Datetime the data points were taken at", "meta": {}, "data_type": null, "quote": null, "tags": []}, "protocol_name_str": {"name": "protocol_name_str", "description": "DEX name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_name_str": {"name": "chain_name_str", "description": "Chain name data was taken from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id_nbr": {"name": "chain_id_nbr", "description": "Corresponding EVM chain id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tvl_usd_nbr": {"name": "tvl_usd_nbr", "description": "TVL in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "volume_usd_nbr": {"name": "volume_usd_nbr", "description": "Volume by the protocol in the last 24 hours", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fees_usd_nbr": {"name": "fees_usd_nbr", "description": "Fees collected in total by the protocol in the last 24 hours", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_count_nbr": {"name": "tx_count_nbr", "description": "TXs done on the protocol in the last 24 hours", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_count_cumulative_nbr": {"name": "tx_count_cumulative_nbr", "description": "Cumulative sum of all TXs done on the protocol", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_dbt://models\\analytics\\dex\\schema.yml", "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\dex\\dex_day_data.sql", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "sync_all_columns", "materialized": "table", "transient": false, "query_tag": "dbt_transformed"}, "created_at": 1653048396.055986, "compiled_sql": "\n\nwith uniswapv2_day_data as (\n    SELECT *\n        ,COALESCE(TX_COUNT_CUMULATIVE - lag(TX_COUNT_CUMULATIVE) over (order by date), TX_COUNT_CUMULATIVE) as TX_COUNT\n        ,'uniswapv2' as PROTOCOL\n     FROM TEST_DWH.DBT_GEORGE_ANALYTICS.uniswapv2_day_data\n),\nuniswapv3_day_data as (\n    SELECT *\n        ,COALESCE(TX_COUNT_CUMULATIVE - lag(TX_COUNT_CUMULATIVE) over (order by date), TX_COUNT_CUMULATIVE) as TX_COUNT\n        ,'uniswapv3' as PROTOCOL\n    FROM TEST_DWH.DBT_GEORGE_ANALYTICS.uniswapv3_day_data\n),\nsushiswap_day_data as (\n    SELECT *\n        ,COALESCE(TX_COUNT_CUMULATIVE - lag(TX_COUNT_CUMULATIVE) over (order by date), TX_COUNT_CUMULATIVE) as TX_COUNT\n        ,'sushiswap' as PROTOCOL\n    FROM TEST_DWH.DBT_GEORGE_ANALYTICS.sushiswap_day_data\n),\nterraswap_day_data as (\n    select date as DATE_DT\n        ,'terraswap' as PROTOCOL_NAME_STR\n        ,'terra' as CHAIN_NAME_STR\n        ,NULL as CHAIN_ID_NBR\n        ,TVL_USD AS TVL_USD_NBR\n        ,VOLUME_USD AS VOLUME_USD_NBR\n        ,FEES_USD AS FEES_USD_NBR\n        ,TX_COUNT AS TX_COUNT_NBR\n        ,SUM (TX_COUNT) OVER (ORDER BY DATE) AS TX_COUNT_CUMULATIVE_NBR\n    FROM  TEST_DWH.DBT_GEORGE_ANALYTICS.terraswap_day_data\n    -- WHERE DATE < '2022-05-01'\n),\nchains as (\n    SELECT *\n    FROM TEST_DWH.DBT_GEORGE_ANALYTICS.chains\n)\n\nSELECT *\nFROM (\n    SELECT DATE AS DATE_DT\n        ,PROTOCOL as PROTOCOL_NAME_STR\n        ,c.NAME AS CHAIN_NAME_STR\n        ,t.CHAIN_ID AS CHAIN_ID_NBR\n        ,TVL_USD AS TVL_USD_NBR\n        ,VOLUME_USD AS VOLUME_USD_NBR\n        ,FEES_USD AS FEES_USD_NBR\n        ,TX_COUNT AS TX_COUNT_NBR\n        ,TX_COUNT_CUMULATIVE AS TX_COUNT_CUMULATIVE_NBR\n    FROM (\n        SELECT *\n        FROM uniswapv2_day_data\n        UNION\n        SELECT *\n        FROM uniswapv3_day_data\n        UNION\n        SELECT *\n        FROM sushiswap_day_data) as t\nLEFT JOIN chains as c\nON t.CHAIN_ID = c.CHAIN_ID)\nUNION\nSELECT *\nFROM terraswap_day_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TEST_DWH.DBT_GEORGE_ANALYTICS.dex_day_data"}, "model.snowflake_dbt.terraswap_day_data": {"raw_sql": "{{ config(tags=[\"lookup\", \"dimension\"]) }}\r\n\r\nSELECT\r\n       DATE\r\n       ,CHAIN_ID\r\n       ,TVL_USD\r\n       ,VOLUME_USD\r\n       ,FEES_USD\r\n       ,TX_COUNT\r\n  FROM {{ var(\"lake_db\") }}.TERRASWAP_LANDING.DAY_DATA", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["lookup", "dimension"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "query_tag": "dbt_landing", "post-hook": [], "pre-hook": []}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS", "fqn": ["snowflake_dbt", "landing", "terraswap", "terraswap_day_data"], "unique_id": "model.snowflake_dbt.terraswap_day_data", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "landing\\terraswap\\terraswap_day_data.sql", "original_file_path": "models\\landing\\terraswap\\terraswap_day_data.sql", "name": "terraswap_day_data", "alias": "terraswap_day_data", "checksum": {"name": "sha256", "checksum": "c4114f0ebb7bd90b769dd68bc99b642f7a1dcebe521a1f5fbcf7ec3494441991"}, "tags": ["lookup", "dimension"], "refs": [], "sources": [], "description": "This table contains daily summary data from the Terraswap subgraph on protocol volume, tvl, fees, and tx count.\r\n\r\nThis table is maintained by Jaryl @jngash\r\n\r\nThis is a landing table that feeds into the combined DEXs table.", "columns": {"date": {"name": "date", "description": "Datetime the data points were taken at", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "Just Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tvl_usd": {"name": "tvl_usd", "description": "TVL in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "volume_usd": {"name": "volume_usd", "description": "Volume by the protocol in the last 24 hours", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fees_usd": {"name": "fees_usd", "description": "Fees collected in total by the protocol in the last 24 hours", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_count": {"name": "tx_count", "description": "Number of TXs in the last 24 hours", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_dbt://models\\landing\\terraswap\\schema.yml", "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\terraswap\\terraswap_day_data.sql", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "sync_all_columns", "materialized": "view", "query_tag": "dbt_landing", "tags": ["lookup", "dimension"]}, "created_at": 1653048396.0383794, "compiled_sql": "\n\nSELECT\n       DATE\n       ,CHAIN_ID\n       ,TVL_USD\n       ,VOLUME_USD\n       ,FEES_USD\n       ,TX_COUNT\n  FROM STG_LAKE.TERRASWAP_LANDING.DAY_DATA", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TEST_DWH.DBT_GEORGE_ANALYTICS.terraswap_day_data"}, "model.snowflake_dbt.sushiswap_day_data": {"raw_sql": "{{ config(tags=[\"lookup\", \"dimension\"]) }}\r\n\r\nSELECT\r\n       DATE\r\n       ,CHAIN_ID\r\n       ,TVL_USD\r\n       ,VOLUME_USD\r\n       ,FEES_USD\r\n       ,TX_COUNT_CUMULATIVE\r\n  FROM {{ var(\"lake_db\") }}.SUSHISWAP_LANDING.DAY_DATA", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["lookup", "dimension"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "query_tag": "dbt_landing", "post-hook": [], "pre-hook": []}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS", "fqn": ["snowflake_dbt", "landing", "sushiswap", "sushiswap_day_data"], "unique_id": "model.snowflake_dbt.sushiswap_day_data", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "landing\\sushiswap\\sushiswap_day_data.sql", "original_file_path": "models\\landing\\sushiswap\\sushiswap_day_data.sql", "name": "sushiswap_day_data", "alias": "sushiswap_day_data", "checksum": {"name": "sha256", "checksum": "b7e045bc2324338274517b207011c3cb1b4071b84da0bc2a190dae4e3b6b83cc"}, "tags": ["lookup", "dimension"], "refs": [], "sources": [], "description": "This table contains daily summary data from the Sushiswap subgraph on protocol volume, tvl, fees, and cumulative tx count.\r\n\r\nThe table is designed to contain multiple chains, currently it only contains data on Ethereum.\r\n\r\nThis table is maintained by Jaryl @jngash\r\n\r\nThis is a landing table that feeds into the combined DEXs table.", "columns": {"date": {"name": "date", "description": "Datetime the data points were taken at", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "EVM chain ID corresponding to the chain where the data point comes from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tvl_usd": {"name": "tvl_usd", "description": "TVL in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "volume_usd": {"name": "volume_usd", "description": "Volume by the protocol in the last 24 hours", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fees_usd": {"name": "fees_usd", "description": "Fees collected in total by the protocol in the last 24 hours", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_count_cumulative": {"name": "tx_count_cumulative", "description": "Running total of the number of tx done on the protocol", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_dbt://models\\landing\\sushiswap\\schema.yml", "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\sushiswap\\sushiswap_day_data.sql", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "sync_all_columns", "materialized": "view", "query_tag": "dbt_landing", "tags": ["lookup", "dimension"]}, "created_at": 1653048396.099402, "compiled_sql": "\n\nSELECT\n       DATE\n       ,CHAIN_ID\n       ,TVL_USD\n       ,VOLUME_USD\n       ,FEES_USD\n       ,TX_COUNT_CUMULATIVE\n  FROM STG_LAKE.SUSHISWAP_LANDING.DAY_DATA", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TEST_DWH.DBT_GEORGE_ANALYTICS.sushiswap_day_data"}, "model.snowflake_dbt.uniswapv2_day_data": {"raw_sql": "{{ config(tags=[\"lookup\", \"dimension\"]) }}\r\n\r\nSELECT\r\n       DATE\r\n       ,CHAIN_ID\r\n       ,TVL_USD\r\n       ,VOLUME_USD\r\n       ,FEES_USD\r\n       ,TX_COUNT_CUMULATIVE\r\n  FROM {{ var(\"lake_db\") }}.UNISWAPV2_LANDING.DAY_DATA", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["lookup", "dimension"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "query_tag": "dbt_landing", "post-hook": [], "pre-hook": []}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS", "fqn": ["snowflake_dbt", "landing", "uniswapv2", "uniswapv2_day_data"], "unique_id": "model.snowflake_dbt.uniswapv2_day_data", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "landing\\uniswapv2\\uniswapv2_day_data.sql", "original_file_path": "models\\landing\\uniswapv2\\uniswapv2_day_data.sql", "name": "uniswapv2_day_data", "alias": "uniswapv2_day_data", "checksum": {"name": "sha256", "checksum": "5c25dc02ed4d9b7a4cf68b054ecb118314b6806814aacf0486498d6d3a0535a7"}, "tags": ["lookup", "dimension"], "refs": [], "sources": [], "description": "This table contains daily summary data from the UniswapV2 subgraph on protocol volume, tvl, fees, and cumulative tx count.\r\n\r\nThe table is designed to contain multiple chains, currently it only contains data on Ethereum.\r\n\r\nThis table is maintained by Jaryl @jngash\r\n\r\nThis is a landing table that feeds into the combined DEXs table.", "columns": {"date": {"name": "date", "description": "Datetime the data points were taken at", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "EVM chain ID corresponding to the chain where the data point comes from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tvl_usd": {"name": "tvl_usd", "description": "TVL in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "volume_usd": {"name": "volume_usd", "description": "Volume by the protocol in the last 24 hours", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fees_usd": {"name": "fees_usd", "description": "Fees collected in total by the protocol in the last 24 hours", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_count_cumulative": {"name": "tx_count_cumulative", "description": "Running total of the number of tx done on the protocol", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_dbt://models\\landing\\uniswapv2\\schema.yml", "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\uniswapv2\\uniswapv2_day_data.sql", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "sync_all_columns", "materialized": "view", "query_tag": "dbt_landing", "tags": ["lookup", "dimension"]}, "created_at": 1653048396.1354027, "compiled_sql": "\n\nSELECT\n       DATE\n       ,CHAIN_ID\n       ,TVL_USD\n       ,VOLUME_USD\n       ,FEES_USD\n       ,TX_COUNT_CUMULATIVE\n  FROM STG_LAKE.UNISWAPV2_LANDING.DAY_DATA", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TEST_DWH.DBT_GEORGE_ANALYTICS.uniswapv2_day_data"}, "model.snowflake_dbt.uniswapv3_day_data": {"raw_sql": "{{ config(tags=[\"lookup\", \"dimension\"]) }}\r\n\r\nSELECT\r\n       DATE\r\n       ,CHAIN_ID\r\n       ,TVL_USD\r\n       ,VOLUME_USD\r\n       ,FEES_USD\r\n       ,TX_COUNT_CUMULATIVE\r\n  FROM {{ var(\"lake_db\") }}.UNISWAPV3_LANDING.DAY_DATA", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["lookup", "dimension"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "query_tag": "dbt_landing", "post-hook": [], "pre-hook": []}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS", "fqn": ["snowflake_dbt", "landing", "uniswapv3", "uniswapv3_day_data"], "unique_id": "model.snowflake_dbt.uniswapv3_day_data", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "landing\\uniswapv3\\uniswapv3_day_data.sql", "original_file_path": "models\\landing\\uniswapv3\\uniswapv3_day_data.sql", "name": "uniswapv3_day_data", "alias": "uniswapv3_day_data", "checksum": {"name": "sha256", "checksum": "e4651c5befc6216c6d5ae12404c5e8e815144124fe24606bbc6129605e828751"}, "tags": ["lookup", "dimension"], "refs": [], "sources": [], "description": "This table contains daily summary data from the UniswapV3 subgraph on protocol volume, tvl, fees, and cumulative tx count.\r\n\r\nThis table is maintained by Jaryl @jngash\r\n\r\nThis is a landing table that feeds into the combined DEXs table.", "columns": {"date": {"name": "date", "description": "Datetime the data points were taken at", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "EVM chain ID corresponding to the chain where the data point comes from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tvl_usd": {"name": "tvl_usd", "description": "TVL in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "volume_usd": {"name": "volume_usd", "description": "Volume by the protocol in the last 24 hours", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fees_usd": {"name": "fees_usd", "description": "Fees collected in total by the protocol in the last 24 hours", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_count_cumulative": {"name": "tx_count_cumulative", "description": "Running total of the number of tx done on the protocol", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_dbt://models\\landing\\uniswapv3\\schema.yml", "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\uniswapv3\\uniswapv3_day_data.sql", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "sync_all_columns", "materialized": "view", "query_tag": "dbt_landing", "tags": ["lookup", "dimension"]}, "created_at": 1653048396.1694024, "compiled_sql": "\n\nSELECT\n       DATE\n       ,CHAIN_ID\n       ,TVL_USD\n       ,VOLUME_USD\n       ,FEES_USD\n       ,TX_COUNT_CUMULATIVE\n  FROM STG_LAKE.UNISWAPV3_LANDING.DAY_DATA", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TEST_DWH.DBT_GEORGE_ANALYTICS.uniswapv3_day_data"}, "test.snowflake_dbt.not_null_treasury_value_by_day_dao_id.9d8f57dc40": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dao_id", "model": "{{ get_where_subquery(ref('treasury_value_by_day')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.treasury_value_by_day"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "analytics", "dao_treasuries", "not_null_treasury_value_by_day_dao_id"], "unique_id": "test.snowflake_dbt.not_null_treasury_value_by_day_dao_id.9d8f57dc40", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_treasury_value_by_day_dao_id.sql", "original_file_path": "models\\analytics\\dao_treasuries\\schema.yml", "name": "not_null_treasury_value_by_day_dao_id", "alias": "not_null_treasury_value_by_day_dao_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["treasury_value_by_day"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\dao_treasuries\\schema.yml\\not_null_treasury_value_by_day_dao_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048395.9712296, "compiled_sql": "\n    \n    \n\n\n\nselect dao_id\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.treasury_value_by_day\nwhere dao_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dao_id", "file_key_name": "models.treasury_value_by_day"}, "test.snowflake_dbt.relationships_treasury_value_by_day_dao_id__dao_id__ref_daos_.d2b4a9c470": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('daos')", "field": "dao_id", "column_name": "dao_id", "model": "{{ get_where_subquery(ref('treasury_value_by_day')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.daos", "model.snowflake_dbt.treasury_value_by_day"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "analytics", "dao_treasuries", "relationships_treasury_value_by_day_dao_id__dao_id__ref_daos_"], "unique_id": "test.snowflake_dbt.relationships_treasury_value_by_day_dao_id__dao_id__ref_daos_.d2b4a9c470", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "relationships_treasury_value_by_day_dao_id__dao_id__ref_daos_.sql", "original_file_path": "models\\analytics\\dao_treasuries\\schema.yml", "name": "relationships_treasury_value_by_day_dao_id__dao_id__ref_daos_", "alias": "relationships_treasury_value_by_day_dao_id__dao_id__ref_daos_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["daos"], ["treasury_value_by_day"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\dao_treasuries\\schema.yml\\relationships_treasury_value_by_day_dao_id__dao_id__ref_daos_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048395.9762619, "compiled_sql": "\n    \n    \n\nwith child as (\n    select dao_id as from_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.treasury_value_by_day\n    where dao_id is not null\n),\n\nparent as (\n    select dao_id as to_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.daos\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dao_id", "file_key_name": "models.treasury_value_by_day"}, "test.snowflake_dbt.not_null_treasury_value_by_day_dao_contract_id.ded4150ab7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dao_contract_id", "model": "{{ get_where_subquery(ref('treasury_value_by_day')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.treasury_value_by_day"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "analytics", "dao_treasuries", "not_null_treasury_value_by_day_dao_contract_id"], "unique_id": "test.snowflake_dbt.not_null_treasury_value_by_day_dao_contract_id.ded4150ab7", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_treasury_value_by_day_dao_contract_id.sql", "original_file_path": "models\\analytics\\dao_treasuries\\schema.yml", "name": "not_null_treasury_value_by_day_dao_contract_id", "alias": "not_null_treasury_value_by_day_dao_contract_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["treasury_value_by_day"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\dao_treasuries\\schema.yml\\not_null_treasury_value_by_day_dao_contract_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048395.991262, "compiled_sql": "\n    \n    \n\n\n\nselect dao_contract_id\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.treasury_value_by_day\nwhere dao_contract_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dao_contract_id", "file_key_name": "models.treasury_value_by_day"}, "test.snowflake_dbt.relationships_treasury_value_by_day_dao_contract_id__dao_contract_id__ref_dao_contracts_.48d772c11d": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_treasury_value_b_d1a635510a1a6bd62e4f823a8982043e\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dao_contracts')", "field": "dao_contract_id", "column_name": "dao_contract_id", "model": "{{ get_where_subquery(ref('treasury_value_by_day')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.dao_contracts", "model.snowflake_dbt.treasury_value_by_day"]}, "config": {"enabled": true, "alias": "relationships_treasury_value_b_d1a635510a1a6bd62e4f823a8982043e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "analytics", "dao_treasuries", "relationships_treasury_value_by_day_dao_contract_id__dao_contract_id__ref_dao_contracts_"], "unique_id": "test.snowflake_dbt.relationships_treasury_value_by_day_dao_contract_id__dao_contract_id__ref_dao_contracts_.48d772c11d", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "relationships_treasury_value_b_d1a635510a1a6bd62e4f823a8982043e.sql", "original_file_path": "models\\analytics\\dao_treasuries\\schema.yml", "name": "relationships_treasury_value_by_day_dao_contract_id__dao_contract_id__ref_dao_contracts_", "alias": "relationships_treasury_value_b_d1a635510a1a6bd62e4f823a8982043e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dao_contracts"], ["treasury_value_by_day"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\dao_treasuries\\schema.yml\\relationships_treasury_value_b_d1a635510a1a6bd62e4f823a8982043e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_treasury_value_b_d1a635510a1a6bd62e4f823a8982043e"}, "created_at": 1653048395.9942617, "compiled_sql": "\n    \n    \n\nwith child as (\n    select dao_contract_id as from_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.treasury_value_by_day\n    where dao_contract_id is not null\n),\n\nparent as (\n    select dao_contract_id as to_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.dao_contracts\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dao_contract_id", "file_key_name": "models.treasury_value_by_day"}, "test.snowflake_dbt.not_null_treasury_value_by_day_network.c7171ee6a8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "network", "model": "{{ get_where_subquery(ref('treasury_value_by_day')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.treasury_value_by_day"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "analytics", "dao_treasuries", "not_null_treasury_value_by_day_network"], "unique_id": "test.snowflake_dbt.not_null_treasury_value_by_day_network.c7171ee6a8", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_treasury_value_by_day_network.sql", "original_file_path": "models\\analytics\\dao_treasuries\\schema.yml", "name": "not_null_treasury_value_by_day_network", "alias": "not_null_treasury_value_by_day_network", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["treasury_value_by_day"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\dao_treasuries\\schema.yml\\not_null_treasury_value_by_day_network.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.0022643, "compiled_sql": "\n    \n    \n\n\n\nselect network\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.treasury_value_by_day\nwhere network is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "network", "file_key_name": "models.treasury_value_by_day"}, "test.snowflake_dbt.accepted_values_treasury_value_by_day_network__ethereum__polygon.a7ee7eadc9": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_treasury_value_90d22b85da4958a2998d474c4b9ea294\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["ethereum", "polygon"], "column_name": "network", "model": "{{ get_where_subquery(ref('treasury_value_by_day')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.treasury_value_by_day"]}, "config": {"enabled": true, "alias": "accepted_values_treasury_value_90d22b85da4958a2998d474c4b9ea294", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "analytics", "dao_treasuries", "accepted_values_treasury_value_by_day_network__ethereum__polygon"], "unique_id": "test.snowflake_dbt.accepted_values_treasury_value_by_day_network__ethereum__polygon.a7ee7eadc9", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "accepted_values_treasury_value_90d22b85da4958a2998d474c4b9ea294.sql", "original_file_path": "models\\analytics\\dao_treasuries\\schema.yml", "name": "accepted_values_treasury_value_by_day_network__ethereum__polygon", "alias": "accepted_values_treasury_value_90d22b85da4958a2998d474c4b9ea294", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["treasury_value_by_day"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\dao_treasuries\\schema.yml\\accepted_values_treasury_value_90d22b85da4958a2998d474c4b9ea294.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_treasury_value_90d22b85da4958a2998d474c4b9ea294"}, "created_at": 1653048396.0052302, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        network as value_field,\n        count(*) as n_records\n\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.treasury_value_by_day\n    group by network\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'ethereum','polygon'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "network", "file_key_name": "models.treasury_value_by_day"}, "test.snowflake_dbt.not_null_treasury_value_by_day_label.2655e2a43f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "label", "model": "{{ get_where_subquery(ref('treasury_value_by_day')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.treasury_value_by_day"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "analytics", "dao_treasuries", "not_null_treasury_value_by_day_label"], "unique_id": "test.snowflake_dbt.not_null_treasury_value_by_day_label.2655e2a43f", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_treasury_value_by_day_label.sql", "original_file_path": "models\\analytics\\dao_treasuries\\schema.yml", "name": "not_null_treasury_value_by_day_label", "alias": "not_null_treasury_value_by_day_label", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["treasury_value_by_day"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\dao_treasuries\\schema.yml\\not_null_treasury_value_by_day_label.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.018226, "compiled_sql": "\n    \n    \n\n\n\nselect label\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.treasury_value_by_day\nwhere label is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "label", "file_key_name": "models.treasury_value_by_day"}, "test.snowflake_dbt.accepted_values_treasury_value_by_day_label__treasury__fee_distributer__treasury_ops.654443f6f1": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_treasury_value_3a5cbf7f45bedfe32b7b62853f38567d\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["treasury", "fee distributer", "treasury ops"], "column_name": "label", "model": "{{ get_where_subquery(ref('treasury_value_by_day')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.treasury_value_by_day"]}, "config": {"enabled": true, "alias": "accepted_values_treasury_value_3a5cbf7f45bedfe32b7b62853f38567d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "analytics", "dao_treasuries", "accepted_values_treasury_value_by_day_label__treasury__fee_distributer__treasury_ops"], "unique_id": "test.snowflake_dbt.accepted_values_treasury_value_by_day_label__treasury__fee_distributer__treasury_ops.654443f6f1", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "accepted_values_treasury_value_3a5cbf7f45bedfe32b7b62853f38567d.sql", "original_file_path": "models\\analytics\\dao_treasuries\\schema.yml", "name": "accepted_values_treasury_value_by_day_label__treasury__fee_distributer__treasury_ops", "alias": "accepted_values_treasury_value_3a5cbf7f45bedfe32b7b62853f38567d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["treasury_value_by_day"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\dao_treasuries\\schema.yml\\accepted_values_treasury_value_3a5cbf7f45bedfe32b7b62853f38567d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_treasury_value_3a5cbf7f45bedfe32b7b62853f38567d"}, "created_at": 1653048396.0212255, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        label as value_field,\n        count(*) as n_records\n\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.treasury_value_by_day\n    group by label\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'treasury','fee distributer','treasury ops'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "label", "file_key_name": "models.treasury_value_by_day"}, "test.snowflake_dbt.not_null_treasury_value_by_day_contract_address.48fd28c96e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contract_address", "model": "{{ get_where_subquery(ref('treasury_value_by_day')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.treasury_value_by_day"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "analytics", "dao_treasuries", "not_null_treasury_value_by_day_contract_address"], "unique_id": "test.snowflake_dbt.not_null_treasury_value_by_day_contract_address.48fd28c96e", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_treasury_value_by_day_contract_address.sql", "original_file_path": "models\\analytics\\dao_treasuries\\schema.yml", "name": "not_null_treasury_value_by_day_contract_address", "alias": "not_null_treasury_value_by_day_contract_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["treasury_value_by_day"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\dao_treasuries\\schema.yml\\not_null_treasury_value_by_day_contract_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.0294251, "compiled_sql": "\n    \n    \n\n\n\nselect contract_address\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.treasury_value_by_day\nwhere contract_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "contract_address", "file_key_name": "models.treasury_value_by_day"}, "test.snowflake_dbt.not_null_treasury_value_by_day_date.ee316b970b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('treasury_value_by_day')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.treasury_value_by_day"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "analytics", "dao_treasuries", "not_null_treasury_value_by_day_date"], "unique_id": "test.snowflake_dbt.not_null_treasury_value_by_day_date.ee316b970b", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_treasury_value_by_day_date.sql", "original_file_path": "models\\analytics\\dao_treasuries\\schema.yml", "name": "not_null_treasury_value_by_day_date", "alias": "not_null_treasury_value_by_day_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["treasury_value_by_day"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\dao_treasuries\\schema.yml\\not_null_treasury_value_by_day_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.0327284, "compiled_sql": "\n    \n    \n\n\n\nselect date\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.treasury_value_by_day\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.treasury_value_by_day"}, "test.snowflake_dbt.unique_terraswap_day_data_date.0e1d660fcb": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('terraswap_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.terraswap_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "terraswap", "unique_terraswap_day_data_date"], "unique_id": "test.snowflake_dbt.unique_terraswap_day_data_date.0e1d660fcb", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "unique_terraswap_day_data_date.sql", "original_file_path": "models\\landing\\terraswap\\schema.yml", "name": "unique_terraswap_day_data_date", "alias": "unique_terraswap_day_data_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["terraswap_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\terraswap\\schema.yml\\unique_terraswap_day_data_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.039558, "compiled_sql": "\n    \n    \n\nselect\n    date as unique_field,\n    count(*) as n_records\n\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.terraswap_day_data\nwhere date is not null\ngroup by date\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.terraswap_day_data"}, "test.snowflake_dbt.not_null_terraswap_day_data_date.6610dfd051": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('terraswap_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.terraswap_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "terraswap", "not_null_terraswap_day_data_date"], "unique_id": "test.snowflake_dbt.not_null_terraswap_day_data_date.6610dfd051", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_terraswap_day_data_date.sql", "original_file_path": "models\\landing\\terraswap\\schema.yml", "name": "not_null_terraswap_day_data_date", "alias": "not_null_terraswap_day_data_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["terraswap_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\terraswap\\schema.yml\\not_null_terraswap_day_data_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.0423622, "compiled_sql": "\n    \n    \n\n\n\nselect date\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.terraswap_day_data\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.terraswap_day_data"}, "test.snowflake_dbt.not_null_terraswap_day_data_chain_id.af265c03e3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "chain_id", "model": "{{ get_where_subquery(ref('terraswap_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.terraswap_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "terraswap", "not_null_terraswap_day_data_chain_id"], "unique_id": "test.snowflake_dbt.not_null_terraswap_day_data_chain_id.af265c03e3", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_terraswap_day_data_chain_id.sql", "original_file_path": "models\\landing\\terraswap\\schema.yml", "name": "not_null_terraswap_day_data_chain_id", "alias": "not_null_terraswap_day_data_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["terraswap_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\terraswap\\schema.yml\\not_null_terraswap_day_data_chain_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.0452023, "compiled_sql": "\n    \n    \n\n\n\nselect chain_id\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.terraswap_day_data\nwhere chain_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "chain_id", "file_key_name": "models.terraswap_day_data"}, "test.snowflake_dbt.not_null_terraswap_day_data_tx_count.5f11a1a568": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_count", "model": "{{ get_where_subquery(ref('terraswap_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.terraswap_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "terraswap", "not_null_terraswap_day_data_tx_count"], "unique_id": "test.snowflake_dbt.not_null_terraswap_day_data_tx_count.5f11a1a568", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_terraswap_day_data_tx_count.sql", "original_file_path": "models\\landing\\terraswap\\schema.yml", "name": "not_null_terraswap_day_data_tx_count", "alias": "not_null_terraswap_day_data_tx_count", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["terraswap_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\terraswap\\schema.yml\\not_null_terraswap_day_data_tx_count.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.0480318, "compiled_sql": "\n    \n    \n\n\n\nselect tx_count\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.terraswap_day_data\nwhere tx_count is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_count", "file_key_name": "models.terraswap_day_data"}, "test.snowflake_dbt.not_null_dex_day_data_date_dt.afcc78e366": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_dt", "model": "{{ get_where_subquery(ref('dex_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.dex_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "analytics", "dex", "not_null_dex_day_data_date_dt"], "unique_id": "test.snowflake_dbt.not_null_dex_day_data_date_dt.afcc78e366", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_dex_day_data_date_dt.sql", "original_file_path": "models\\analytics\\dex\\schema.yml", "name": "not_null_dex_day_data_date_dt", "alias": "not_null_dex_day_data_date_dt", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dex_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\dex\\schema.yml\\not_null_dex_day_data_date_dt.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.0571563, "compiled_sql": "\n    \n    \n\n\n\nselect date_dt\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.dex_day_data\nwhere date_dt is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_dt", "file_key_name": "models.dex_day_data"}, "test.snowflake_dbt.relationships_dex_day_data_date_dt__date__ref_uniswapv2_day_data_.f65f941b62": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dex_day_data_4864d1de2128cc708a4db5ebed12ca69\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('uniswapv2_day_data')", "field": "date", "column_name": "date_dt", "model": "{{ get_where_subquery(ref('dex_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.uniswapv2_day_data", "model.snowflake_dbt.dex_day_data"]}, "config": {"enabled": true, "alias": "relationships_dex_day_data_4864d1de2128cc708a4db5ebed12ca69", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "analytics", "dex", "relationships_dex_day_data_date_dt__date__ref_uniswapv2_day_data_"], "unique_id": "test.snowflake_dbt.relationships_dex_day_data_date_dt__date__ref_uniswapv2_day_data_.f65f941b62", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "relationships_dex_day_data_4864d1de2128cc708a4db5ebed12ca69.sql", "original_file_path": "models\\analytics\\dex\\schema.yml", "name": "relationships_dex_day_data_date_dt__date__ref_uniswapv2_day_data_", "alias": "relationships_dex_day_data_4864d1de2128cc708a4db5ebed12ca69", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["uniswapv2_day_data"], ["dex_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\dex\\schema.yml\\relationships_dex_day_data_4864d1de2128cc708a4db5ebed12ca69.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_dex_day_data_4864d1de2128cc708a4db5ebed12ca69"}, "created_at": 1653048396.0605865, "compiled_sql": "\n    \n    \n\nwith child as (\n    select date_dt as from_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.dex_day_data\n    where date_dt is not null\n),\n\nparent as (\n    select date as to_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.uniswapv2_day_data\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_dt", "file_key_name": "models.dex_day_data"}, "test.snowflake_dbt.not_null_dex_day_data_protocol_name_str.420535d696": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "protocol_name_str", "model": "{{ get_where_subquery(ref('dex_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.dex_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "analytics", "dex", "not_null_dex_day_data_protocol_name_str"], "unique_id": "test.snowflake_dbt.not_null_dex_day_data_protocol_name_str.420535d696", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_dex_day_data_protocol_name_str.sql", "original_file_path": "models\\analytics\\dex\\schema.yml", "name": "not_null_dex_day_data_protocol_name_str", "alias": "not_null_dex_day_data_protocol_name_str", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dex_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\dex\\schema.yml\\not_null_dex_day_data_protocol_name_str.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.0683599, "compiled_sql": "\n    \n    \n\n\n\nselect protocol_name_str\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.dex_day_data\nwhere protocol_name_str is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "protocol_name_str", "file_key_name": "models.dex_day_data"}, "test.snowflake_dbt.accepted_values_dex_day_data_protocol_name_str__uniswapv2__uniswapv3__sushiswap__terraswap.90840fad2a": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dex_day_data_99185ee4d1074a792c8eb1f84e104ea8\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["uniswapv2", "uniswapv3", "sushiswap", "terraswap"], "column_name": "protocol_name_str", "model": "{{ get_where_subquery(ref('dex_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.dex_day_data"]}, "config": {"enabled": true, "alias": "accepted_values_dex_day_data_99185ee4d1074a792c8eb1f84e104ea8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "analytics", "dex", "accepted_values_dex_day_data_protocol_name_str__uniswapv2__uniswapv3__sushiswap__terraswap"], "unique_id": "test.snowflake_dbt.accepted_values_dex_day_data_protocol_name_str__uniswapv2__uniswapv3__sushiswap__terraswap.90840fad2a", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "accepted_values_dex_day_data_99185ee4d1074a792c8eb1f84e104ea8.sql", "original_file_path": "models\\analytics\\dex\\schema.yml", "name": "accepted_values_dex_day_data_protocol_name_str__uniswapv2__uniswapv3__sushiswap__terraswap", "alias": "accepted_values_dex_day_data_99185ee4d1074a792c8eb1f84e104ea8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dex_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\dex\\schema.yml\\accepted_values_dex_day_data_99185ee4d1074a792c8eb1f84e104ea8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_dex_day_data_99185ee4d1074a792c8eb1f84e104ea8"}, "created_at": 1653048396.0718253, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        protocol_name_str as value_field,\n        count(*) as n_records\n\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.dex_day_data\n    group by protocol_name_str\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'uniswapv2','uniswapv3','sushiswap','terraswap'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "protocol_name_str", "file_key_name": "models.dex_day_data"}, "test.snowflake_dbt.not_null_dex_day_data_chain_name_str.ab7a62a39f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "chain_name_str", "model": "{{ get_where_subquery(ref('dex_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.dex_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "analytics", "dex", "not_null_dex_day_data_chain_name_str"], "unique_id": "test.snowflake_dbt.not_null_dex_day_data_chain_name_str.ab7a62a39f", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_dex_day_data_chain_name_str.sql", "original_file_path": "models\\analytics\\dex\\schema.yml", "name": "not_null_dex_day_data_chain_name_str", "alias": "not_null_dex_day_data_chain_name_str", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dex_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\dex\\schema.yml\\not_null_dex_day_data_chain_name_str.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.0802372, "compiled_sql": "\n    \n    \n\n\n\nselect chain_name_str\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.dex_day_data\nwhere chain_name_str is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "chain_name_str", "file_key_name": "models.dex_day_data"}, "test.snowflake_dbt.relationships_dex_day_data_chain_id_nbr__chain_id__ref_chains_.6ee5b58ad5": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('chains')", "field": "chain_id", "column_name": "chain_id_nbr", "model": "{{ get_where_subquery(ref('dex_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.chains", "model.snowflake_dbt.dex_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "analytics", "dex", "relationships_dex_day_data_chain_id_nbr__chain_id__ref_chains_"], "unique_id": "test.snowflake_dbt.relationships_dex_day_data_chain_id_nbr__chain_id__ref_chains_.6ee5b58ad5", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "relationships_dex_day_data_chain_id_nbr__chain_id__ref_chains_.sql", "original_file_path": "models\\analytics\\dex\\schema.yml", "name": "relationships_dex_day_data_chain_id_nbr__chain_id__ref_chains_", "alias": "relationships_dex_day_data_chain_id_nbr__chain_id__ref_chains_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["chains"], ["dex_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\dex\\schema.yml\\relationships_dex_day_data_chain_id_nbr__chain_id__ref_chains_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.08311, "compiled_sql": "\n    \n    \n\nwith child as (\n    select chain_id_nbr as from_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.dex_day_data\n    where chain_id_nbr is not null\n),\n\nparent as (\n    select chain_id as to_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.chains\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "chain_id_nbr", "file_key_name": "models.dex_day_data"}, "test.snowflake_dbt.not_null_dex_day_data_tx_count_nbr.4786ef75dc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_count_nbr", "model": "{{ get_where_subquery(ref('dex_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.dex_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "analytics", "dex", "not_null_dex_day_data_tx_count_nbr"], "unique_id": "test.snowflake_dbt.not_null_dex_day_data_tx_count_nbr.4786ef75dc", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_dex_day_data_tx_count_nbr.sql", "original_file_path": "models\\analytics\\dex\\schema.yml", "name": "not_null_dex_day_data_tx_count_nbr", "alias": "not_null_dex_day_data_tx_count_nbr", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dex_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\dex\\schema.yml\\not_null_dex_day_data_tx_count_nbr.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.0904307, "compiled_sql": "\n    \n    \n\n\n\nselect tx_count_nbr\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.dex_day_data\nwhere tx_count_nbr is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_count_nbr", "file_key_name": "models.dex_day_data"}, "test.snowflake_dbt.not_null_dex_day_data_tx_count_cumulative_nbr.e0b4aaa70d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_count_cumulative_nbr", "model": "{{ get_where_subquery(ref('dex_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.dex_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "analytics", "dex", "not_null_dex_day_data_tx_count_cumulative_nbr"], "unique_id": "test.snowflake_dbt.not_null_dex_day_data_tx_count_cumulative_nbr.e0b4aaa70d", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_dex_day_data_tx_count_cumulative_nbr.sql", "original_file_path": "models\\analytics\\dex\\schema.yml", "name": "not_null_dex_day_data_tx_count_cumulative_nbr", "alias": "not_null_dex_day_data_tx_count_cumulative_nbr", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dex_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\analytics\\dex\\schema.yml\\not_null_dex_day_data_tx_count_cumulative_nbr.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.0934262, "compiled_sql": "\n    \n    \n\n\n\nselect tx_count_cumulative_nbr\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.dex_day_data\nwhere tx_count_cumulative_nbr is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_count_cumulative_nbr", "file_key_name": "models.dex_day_data"}, "test.snowflake_dbt.unique_sushiswap_day_data_date.05462d8b49": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('sushiswap_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.sushiswap_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "sushiswap", "unique_sushiswap_day_data_date"], "unique_id": "test.snowflake_dbt.unique_sushiswap_day_data_date.05462d8b49", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "unique_sushiswap_day_data_date.sql", "original_file_path": "models\\landing\\sushiswap\\schema.yml", "name": "unique_sushiswap_day_data_date", "alias": "unique_sushiswap_day_data_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushiswap_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\sushiswap\\schema.yml\\unique_sushiswap_day_data_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.101398, "compiled_sql": "\n    \n    \n\nselect\n    date as unique_field,\n    count(*) as n_records\n\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.sushiswap_day_data\nwhere date is not null\ngroup by date\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.sushiswap_day_data"}, "test.snowflake_dbt.not_null_sushiswap_day_data_date.2e7232fcd3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('sushiswap_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.sushiswap_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "sushiswap", "not_null_sushiswap_day_data_date"], "unique_id": "test.snowflake_dbt.not_null_sushiswap_day_data_date.2e7232fcd3", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_sushiswap_day_data_date.sql", "original_file_path": "models\\landing\\sushiswap\\schema.yml", "name": "not_null_sushiswap_day_data_date", "alias": "not_null_sushiswap_day_data_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushiswap_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\sushiswap\\schema.yml\\not_null_sushiswap_day_data_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.1043973, "compiled_sql": "\n    \n    \n\n\n\nselect date\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.sushiswap_day_data\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.sushiswap_day_data"}, "test.snowflake_dbt.not_null_sushiswap_day_data_chain_id.dd3e864b81": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "chain_id", "model": "{{ get_where_subquery(ref('sushiswap_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.sushiswap_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "sushiswap", "not_null_sushiswap_day_data_chain_id"], "unique_id": "test.snowflake_dbt.not_null_sushiswap_day_data_chain_id.dd3e864b81", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_sushiswap_day_data_chain_id.sql", "original_file_path": "models\\landing\\sushiswap\\schema.yml", "name": "not_null_sushiswap_day_data_chain_id", "alias": "not_null_sushiswap_day_data_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushiswap_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\sushiswap\\schema.yml\\not_null_sushiswap_day_data_chain_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.1083968, "compiled_sql": "\n    \n    \n\n\n\nselect chain_id\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.sushiswap_day_data\nwhere chain_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "chain_id", "file_key_name": "models.sushiswap_day_data"}, "test.snowflake_dbt.relationships_sushiswap_day_data_chain_id__chain_id__ref_chains_.edc6f81d40": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_sushiswap_day_da_ecb09ccf578f2dd27839f2b754674203\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('chains')", "field": "chain_id", "column_name": "chain_id", "model": "{{ get_where_subquery(ref('sushiswap_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.chains", "model.snowflake_dbt.sushiswap_day_data"]}, "config": {"enabled": true, "alias": "relationships_sushiswap_day_da_ecb09ccf578f2dd27839f2b754674203", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "sushiswap", "relationships_sushiswap_day_data_chain_id__chain_id__ref_chains_"], "unique_id": "test.snowflake_dbt.relationships_sushiswap_day_data_chain_id__chain_id__ref_chains_.edc6f81d40", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "relationships_sushiswap_day_da_ecb09ccf578f2dd27839f2b754674203.sql", "original_file_path": "models\\landing\\sushiswap\\schema.yml", "name": "relationships_sushiswap_day_data_chain_id__chain_id__ref_chains_", "alias": "relationships_sushiswap_day_da_ecb09ccf578f2dd27839f2b754674203", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["chains"], ["sushiswap_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\sushiswap\\schema.yml\\relationships_sushiswap_day_da_ecb09ccf578f2dd27839f2b754674203.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_sushiswap_day_da_ecb09ccf578f2dd27839f2b754674203"}, "created_at": 1653048396.1113966, "compiled_sql": "\n    \n    \n\nwith child as (\n    select chain_id as from_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.sushiswap_day_data\n    where chain_id is not null\n),\n\nparent as (\n    select chain_id as to_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.chains\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "chain_id", "file_key_name": "models.sushiswap_day_data"}, "test.snowflake_dbt.not_null_sushiswap_day_data_tvl_usd.0742dcbf6a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tvl_usd", "model": "{{ get_where_subquery(ref('sushiswap_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.sushiswap_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "sushiswap", "not_null_sushiswap_day_data_tvl_usd"], "unique_id": "test.snowflake_dbt.not_null_sushiswap_day_data_tvl_usd.0742dcbf6a", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_sushiswap_day_data_tvl_usd.sql", "original_file_path": "models\\landing\\sushiswap\\schema.yml", "name": "not_null_sushiswap_day_data_tvl_usd", "alias": "not_null_sushiswap_day_data_tvl_usd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushiswap_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\sushiswap\\schema.yml\\not_null_sushiswap_day_data_tvl_usd.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.120397, "compiled_sql": "\n    \n    \n\n\n\nselect tvl_usd\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.sushiswap_day_data\nwhere tvl_usd is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tvl_usd", "file_key_name": "models.sushiswap_day_data"}, "test.snowflake_dbt.not_null_sushiswap_day_data_volume_usd.2755897b1f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "volume_usd", "model": "{{ get_where_subquery(ref('sushiswap_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.sushiswap_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "sushiswap", "not_null_sushiswap_day_data_volume_usd"], "unique_id": "test.snowflake_dbt.not_null_sushiswap_day_data_volume_usd.2755897b1f", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_sushiswap_day_data_volume_usd.sql", "original_file_path": "models\\landing\\sushiswap\\schema.yml", "name": "not_null_sushiswap_day_data_volume_usd", "alias": "not_null_sushiswap_day_data_volume_usd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushiswap_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\sushiswap\\schema.yml\\not_null_sushiswap_day_data_volume_usd.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.1234407, "compiled_sql": "\n    \n    \n\n\n\nselect volume_usd\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.sushiswap_day_data\nwhere volume_usd is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "volume_usd", "file_key_name": "models.sushiswap_day_data"}, "test.snowflake_dbt.not_null_sushiswap_day_data_fees_usd.86d82bf175": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fees_usd", "model": "{{ get_where_subquery(ref('sushiswap_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.sushiswap_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "sushiswap", "not_null_sushiswap_day_data_fees_usd"], "unique_id": "test.snowflake_dbt.not_null_sushiswap_day_data_fees_usd.86d82bf175", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_sushiswap_day_data_fees_usd.sql", "original_file_path": "models\\landing\\sushiswap\\schema.yml", "name": "not_null_sushiswap_day_data_fees_usd", "alias": "not_null_sushiswap_day_data_fees_usd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushiswap_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\sushiswap\\schema.yml\\not_null_sushiswap_day_data_fees_usd.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.1254408, "compiled_sql": "\n    \n    \n\n\n\nselect fees_usd\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.sushiswap_day_data\nwhere fees_usd is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "fees_usd", "file_key_name": "models.sushiswap_day_data"}, "test.snowflake_dbt.not_null_sushiswap_day_data_tx_count_cumulative.0d718c040d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_count_cumulative", "model": "{{ get_where_subquery(ref('sushiswap_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.sushiswap_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "sushiswap", "not_null_sushiswap_day_data_tx_count_cumulative"], "unique_id": "test.snowflake_dbt.not_null_sushiswap_day_data_tx_count_cumulative.0d718c040d", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_sushiswap_day_data_tx_count_cumulative.sql", "original_file_path": "models\\landing\\sushiswap\\schema.yml", "name": "not_null_sushiswap_day_data_tx_count_cumulative", "alias": "not_null_sushiswap_day_data_tx_count_cumulative", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushiswap_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\sushiswap\\schema.yml\\not_null_sushiswap_day_data_tx_count_cumulative.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.1284022, "compiled_sql": "\n    \n    \n\n\n\nselect tx_count_cumulative\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.sushiswap_day_data\nwhere tx_count_cumulative is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_count_cumulative", "file_key_name": "models.sushiswap_day_data"}, "test.snowflake_dbt.unique_uniswapv2_day_data_date.0ddac06709": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('uniswapv2_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.uniswapv2_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "uniswapv2", "unique_uniswapv2_day_data_date"], "unique_id": "test.snowflake_dbt.unique_uniswapv2_day_data_date.0ddac06709", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "unique_uniswapv2_day_data_date.sql", "original_file_path": "models\\landing\\uniswapv2\\schema.yml", "name": "unique_uniswapv2_day_data_date", "alias": "unique_uniswapv2_day_data_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["uniswapv2_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\uniswapv2\\schema.yml\\unique_uniswapv2_day_data_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.1364021, "compiled_sql": "\n    \n    \n\nselect\n    date as unique_field,\n    count(*) as n_records\n\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.uniswapv2_day_data\nwhere date is not null\ngroup by date\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.uniswapv2_day_data"}, "test.snowflake_dbt.not_null_uniswapv2_day_data_date.605c976cb3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('uniswapv2_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.uniswapv2_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "uniswapv2", "not_null_uniswapv2_day_data_date"], "unique_id": "test.snowflake_dbt.not_null_uniswapv2_day_data_date.605c976cb3", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_uniswapv2_day_data_date.sql", "original_file_path": "models\\landing\\uniswapv2\\schema.yml", "name": "not_null_uniswapv2_day_data_date", "alias": "not_null_uniswapv2_day_data_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["uniswapv2_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\uniswapv2\\schema.yml\\not_null_uniswapv2_day_data_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.1394002, "compiled_sql": "\n    \n    \n\n\n\nselect date\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.uniswapv2_day_data\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.uniswapv2_day_data"}, "test.snowflake_dbt.not_null_uniswapv2_day_data_chain_id.96c206c610": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "chain_id", "model": "{{ get_where_subquery(ref('uniswapv2_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.uniswapv2_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "uniswapv2", "not_null_uniswapv2_day_data_chain_id"], "unique_id": "test.snowflake_dbt.not_null_uniswapv2_day_data_chain_id.96c206c610", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_uniswapv2_day_data_chain_id.sql", "original_file_path": "models\\landing\\uniswapv2\\schema.yml", "name": "not_null_uniswapv2_day_data_chain_id", "alias": "not_null_uniswapv2_day_data_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["uniswapv2_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\uniswapv2\\schema.yml\\not_null_uniswapv2_day_data_chain_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.1424274, "compiled_sql": "\n    \n    \n\n\n\nselect chain_id\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.uniswapv2_day_data\nwhere chain_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "chain_id", "file_key_name": "models.uniswapv2_day_data"}, "test.snowflake_dbt.relationships_uniswapv2_day_data_chain_id__chain_id__ref_chains_.e739f78ab8": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_uniswapv2_day_da_798727d0f9a54fdec3f64e532a6c8db0\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('chains')", "field": "chain_id", "column_name": "chain_id", "model": "{{ get_where_subquery(ref('uniswapv2_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.chains", "model.snowflake_dbt.uniswapv2_day_data"]}, "config": {"enabled": true, "alias": "relationships_uniswapv2_day_da_798727d0f9a54fdec3f64e532a6c8db0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "uniswapv2", "relationships_uniswapv2_day_data_chain_id__chain_id__ref_chains_"], "unique_id": "test.snowflake_dbt.relationships_uniswapv2_day_data_chain_id__chain_id__ref_chains_.e739f78ab8", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "relationships_uniswapv2_day_da_798727d0f9a54fdec3f64e532a6c8db0.sql", "original_file_path": "models\\landing\\uniswapv2\\schema.yml", "name": "relationships_uniswapv2_day_data_chain_id__chain_id__ref_chains_", "alias": "relationships_uniswapv2_day_da_798727d0f9a54fdec3f64e532a6c8db0", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["chains"], ["uniswapv2_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\uniswapv2\\schema.yml\\relationships_uniswapv2_day_da_798727d0f9a54fdec3f64e532a6c8db0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_uniswapv2_day_da_798727d0f9a54fdec3f64e532a6c8db0"}, "created_at": 1653048396.1454256, "compiled_sql": "\n    \n    \n\nwith child as (\n    select chain_id as from_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.uniswapv2_day_data\n    where chain_id is not null\n),\n\nparent as (\n    select chain_id as to_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.chains\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "chain_id", "file_key_name": "models.uniswapv2_day_data"}, "test.snowflake_dbt.not_null_uniswapv2_day_data_tvl_usd.a226c5ba98": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tvl_usd", "model": "{{ get_where_subquery(ref('uniswapv2_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.uniswapv2_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "uniswapv2", "not_null_uniswapv2_day_data_tvl_usd"], "unique_id": "test.snowflake_dbt.not_null_uniswapv2_day_data_tvl_usd.a226c5ba98", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_uniswapv2_day_data_tvl_usd.sql", "original_file_path": "models\\landing\\uniswapv2\\schema.yml", "name": "not_null_uniswapv2_day_data_tvl_usd", "alias": "not_null_uniswapv2_day_data_tvl_usd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["uniswapv2_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\uniswapv2\\schema.yml\\not_null_uniswapv2_day_data_tvl_usd.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.153427, "compiled_sql": "\n    \n    \n\n\n\nselect tvl_usd\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.uniswapv2_day_data\nwhere tvl_usd is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tvl_usd", "file_key_name": "models.uniswapv2_day_data"}, "test.snowflake_dbt.not_null_uniswapv2_day_data_volume_usd.78f8bdfa16": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "volume_usd", "model": "{{ get_where_subquery(ref('uniswapv2_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.uniswapv2_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "uniswapv2", "not_null_uniswapv2_day_data_volume_usd"], "unique_id": "test.snowflake_dbt.not_null_uniswapv2_day_data_volume_usd.78f8bdfa16", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_uniswapv2_day_data_volume_usd.sql", "original_file_path": "models\\landing\\uniswapv2\\schema.yml", "name": "not_null_uniswapv2_day_data_volume_usd", "alias": "not_null_uniswapv2_day_data_volume_usd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["uniswapv2_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\uniswapv2\\schema.yml\\not_null_uniswapv2_day_data_volume_usd.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.1564248, "compiled_sql": "\n    \n    \n\n\n\nselect volume_usd\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.uniswapv2_day_data\nwhere volume_usd is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "volume_usd", "file_key_name": "models.uniswapv2_day_data"}, "test.snowflake_dbt.not_null_uniswapv2_day_data_fees_usd.f9d9c8a5d2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fees_usd", "model": "{{ get_where_subquery(ref('uniswapv2_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.uniswapv2_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "uniswapv2", "not_null_uniswapv2_day_data_fees_usd"], "unique_id": "test.snowflake_dbt.not_null_uniswapv2_day_data_fees_usd.f9d9c8a5d2", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_uniswapv2_day_data_fees_usd.sql", "original_file_path": "models\\landing\\uniswapv2\\schema.yml", "name": "not_null_uniswapv2_day_data_fees_usd", "alias": "not_null_uniswapv2_day_data_fees_usd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["uniswapv2_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\uniswapv2\\schema.yml\\not_null_uniswapv2_day_data_fees_usd.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.1594026, "compiled_sql": "\n    \n    \n\n\n\nselect fees_usd\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.uniswapv2_day_data\nwhere fees_usd is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "fees_usd", "file_key_name": "models.uniswapv2_day_data"}, "test.snowflake_dbt.not_null_uniswapv2_day_data_tx_count_cumulative.e86c9fc261": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_count_cumulative", "model": "{{ get_where_subquery(ref('uniswapv2_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.uniswapv2_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "uniswapv2", "not_null_uniswapv2_day_data_tx_count_cumulative"], "unique_id": "test.snowflake_dbt.not_null_uniswapv2_day_data_tx_count_cumulative.e86c9fc261", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_uniswapv2_day_data_tx_count_cumulative.sql", "original_file_path": "models\\landing\\uniswapv2\\schema.yml", "name": "not_null_uniswapv2_day_data_tx_count_cumulative", "alias": "not_null_uniswapv2_day_data_tx_count_cumulative", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["uniswapv2_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\uniswapv2\\schema.yml\\not_null_uniswapv2_day_data_tx_count_cumulative.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.1623998, "compiled_sql": "\n    \n    \n\n\n\nselect tx_count_cumulative\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.uniswapv2_day_data\nwhere tx_count_cumulative is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_count_cumulative", "file_key_name": "models.uniswapv2_day_data"}, "test.snowflake_dbt.unique_uniswapv3_day_data_date.818b6b1825": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('uniswapv3_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.uniswapv3_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "uniswapv3", "unique_uniswapv3_day_data_date"], "unique_id": "test.snowflake_dbt.unique_uniswapv3_day_data_date.818b6b1825", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "unique_uniswapv3_day_data_date.sql", "original_file_path": "models\\landing\\uniswapv3\\schema.yml", "name": "unique_uniswapv3_day_data_date", "alias": "unique_uniswapv3_day_data_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["uniswapv3_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\uniswapv3\\schema.yml\\unique_uniswapv3_day_data_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.1704257, "compiled_sql": "\n    \n    \n\nselect\n    date as unique_field,\n    count(*) as n_records\n\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.uniswapv3_day_data\nwhere date is not null\ngroup by date\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.uniswapv3_day_data"}, "test.snowflake_dbt.not_null_uniswapv3_day_data_date.09ea59d4d5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('uniswapv3_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.uniswapv3_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "uniswapv3", "not_null_uniswapv3_day_data_date"], "unique_id": "test.snowflake_dbt.not_null_uniswapv3_day_data_date.09ea59d4d5", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_uniswapv3_day_data_date.sql", "original_file_path": "models\\landing\\uniswapv3\\schema.yml", "name": "not_null_uniswapv3_day_data_date", "alias": "not_null_uniswapv3_day_data_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["uniswapv3_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\uniswapv3\\schema.yml\\not_null_uniswapv3_day_data_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.1734238, "compiled_sql": "\n    \n    \n\n\n\nselect date\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.uniswapv3_day_data\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.uniswapv3_day_data"}, "test.snowflake_dbt.not_null_uniswapv3_day_data_chain_id.f19b0f86ea": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "chain_id", "model": "{{ get_where_subquery(ref('uniswapv3_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.uniswapv3_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "uniswapv3", "not_null_uniswapv3_day_data_chain_id"], "unique_id": "test.snowflake_dbt.not_null_uniswapv3_day_data_chain_id.f19b0f86ea", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_uniswapv3_day_data_chain_id.sql", "original_file_path": "models\\landing\\uniswapv3\\schema.yml", "name": "not_null_uniswapv3_day_data_chain_id", "alias": "not_null_uniswapv3_day_data_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["uniswapv3_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\uniswapv3\\schema.yml\\not_null_uniswapv3_day_data_chain_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.1765363, "compiled_sql": "\n    \n    \n\n\n\nselect chain_id\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.uniswapv3_day_data\nwhere chain_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "chain_id", "file_key_name": "models.uniswapv3_day_data"}, "test.snowflake_dbt.relationships_uniswapv3_day_data_chain_id__chain_id__ref_chains_.27aeb822db": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_uniswapv3_day_da_786e6878c4641c69cecd1af8c7003596\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('chains')", "field": "chain_id", "column_name": "chain_id", "model": "{{ get_where_subquery(ref('uniswapv3_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.chains", "model.snowflake_dbt.uniswapv3_day_data"]}, "config": {"enabled": true, "alias": "relationships_uniswapv3_day_da_786e6878c4641c69cecd1af8c7003596", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "uniswapv3", "relationships_uniswapv3_day_data_chain_id__chain_id__ref_chains_"], "unique_id": "test.snowflake_dbt.relationships_uniswapv3_day_data_chain_id__chain_id__ref_chains_.27aeb822db", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "relationships_uniswapv3_day_da_786e6878c4641c69cecd1af8c7003596.sql", "original_file_path": "models\\landing\\uniswapv3\\schema.yml", "name": "relationships_uniswapv3_day_data_chain_id__chain_id__ref_chains_", "alias": "relationships_uniswapv3_day_da_786e6878c4641c69cecd1af8c7003596", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["chains"], ["uniswapv3_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\uniswapv3\\schema.yml\\relationships_uniswapv3_day_da_786e6878c4641c69cecd1af8c7003596.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_uniswapv3_day_da_786e6878c4641c69cecd1af8c7003596"}, "created_at": 1653048396.1804726, "compiled_sql": "\n    \n    \n\nwith child as (\n    select chain_id as from_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.uniswapv3_day_data\n    where chain_id is not null\n),\n\nparent as (\n    select chain_id as to_field\n    from TEST_DWH.DBT_GEORGE_ANALYTICS.chains\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "chain_id", "file_key_name": "models.uniswapv3_day_data"}, "test.snowflake_dbt.not_null_uniswapv3_day_data_tvl_usd.9b93f821df": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tvl_usd", "model": "{{ get_where_subquery(ref('uniswapv3_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.uniswapv3_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "uniswapv3", "not_null_uniswapv3_day_data_tvl_usd"], "unique_id": "test.snowflake_dbt.not_null_uniswapv3_day_data_tvl_usd.9b93f821df", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_uniswapv3_day_data_tvl_usd.sql", "original_file_path": "models\\landing\\uniswapv3\\schema.yml", "name": "not_null_uniswapv3_day_data_tvl_usd", "alias": "not_null_uniswapv3_day_data_tvl_usd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["uniswapv3_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\uniswapv3\\schema.yml\\not_null_uniswapv3_day_data_tvl_usd.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.1883953, "compiled_sql": "\n    \n    \n\n\n\nselect tvl_usd\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.uniswapv3_day_data\nwhere tvl_usd is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tvl_usd", "file_key_name": "models.uniswapv3_day_data"}, "test.snowflake_dbt.not_null_uniswapv3_day_data_volume_usd.be30eafeba": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "volume_usd", "model": "{{ get_where_subquery(ref('uniswapv3_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.uniswapv3_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "uniswapv3", "not_null_uniswapv3_day_data_volume_usd"], "unique_id": "test.snowflake_dbt.not_null_uniswapv3_day_data_volume_usd.be30eafeba", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_uniswapv3_day_data_volume_usd.sql", "original_file_path": "models\\landing\\uniswapv3\\schema.yml", "name": "not_null_uniswapv3_day_data_volume_usd", "alias": "not_null_uniswapv3_day_data_volume_usd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["uniswapv3_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\uniswapv3\\schema.yml\\not_null_uniswapv3_day_data_volume_usd.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.1917706, "compiled_sql": "\n    \n    \n\n\n\nselect volume_usd\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.uniswapv3_day_data\nwhere volume_usd is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "volume_usd", "file_key_name": "models.uniswapv3_day_data"}, "test.snowflake_dbt.not_null_uniswapv3_day_data_fees_usd.afcf8d2975": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fees_usd", "model": "{{ get_where_subquery(ref('uniswapv3_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.uniswapv3_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "uniswapv3", "not_null_uniswapv3_day_data_fees_usd"], "unique_id": "test.snowflake_dbt.not_null_uniswapv3_day_data_fees_usd.afcf8d2975", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_uniswapv3_day_data_fees_usd.sql", "original_file_path": "models\\landing\\uniswapv3\\schema.yml", "name": "not_null_uniswapv3_day_data_fees_usd", "alias": "not_null_uniswapv3_day_data_fees_usd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["uniswapv3_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\uniswapv3\\schema.yml\\not_null_uniswapv3_day_data_fees_usd.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.1945276, "compiled_sql": "\n    \n    \n\n\n\nselect fees_usd\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.uniswapv3_day_data\nwhere fees_usd is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "fees_usd", "file_key_name": "models.uniswapv3_day_data"}, "test.snowflake_dbt.not_null_uniswapv3_day_data_tx_count_cumulative.eecc2d8662": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_count_cumulative", "model": "{{ get_where_subquery(ref('uniswapv3_day_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_dbt.uniswapv3_day_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TEST_DWH", "schema": "DBT_GEORGE_ANALYTICS_dbt_test__audit", "fqn": ["snowflake_dbt", "landing", "uniswapv3", "not_null_uniswapv3_day_data_tx_count_cumulative"], "unique_id": "test.snowflake_dbt.not_null_uniswapv3_day_data_tx_count_cumulative.eecc2d8662", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "not_null_uniswapv3_day_data_tx_count_cumulative.sql", "original_file_path": "models\\landing\\uniswapv3\\schema.yml", "name": "not_null_uniswapv3_day_data_tx_count_cumulative", "alias": "not_null_uniswapv3_day_data_tx_count_cumulative", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["uniswapv3_day_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_dbt\\models\\landing\\uniswapv3\\schema.yml\\not_null_uniswapv3_day_data_tx_count_cumulative.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653048396.1984518, "compiled_sql": "\n    \n    \n\n\n\nselect tx_count_cumulative\nfrom TEST_DWH.DBT_GEORGE_ANALYTICS.uniswapv3_day_data\nwhere tx_count_cumulative is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_count_cumulative", "file_key_name": "models.uniswapv3_day_data"}}, "sources": {}, "macros": {"macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0390987}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) %}\n  {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} COMMENT $${{ column_dict[column_name]['description'] | replace('$', '[$]') }}$$\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.040101}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {% if (column_name|upper in model_columns) or (column_name in model_columns) %}\n      {{ get_column_comment_sql(column_name, model_columns) }}\n    {% else %}\n      {{column_name}}\n    {% endif %}\n    {{ \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0410967}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0430958}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0450933}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0470934}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.048094}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0490935}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0490935}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0500958}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0500958}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0510936}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0520577}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.054059}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in column_dict if (column_name in existing_columns) or (column_name|upper in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{ ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0550969}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0560565}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0570967}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.059056}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0610585}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0620584}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0620584}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.065094}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.070059}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0740561}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0800555}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0840938}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0840938}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0850594}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0920627}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0920627}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0940583}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.0990944}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1010938}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1050963}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1060941}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1070967}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.108057}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.109057}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.109057}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.111095}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1120942}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1140962}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1160944}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1170936}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1170936}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1190572}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.120056}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.121057}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.121057}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1230574}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1260564}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.127094}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1280944}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1280944}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1290944}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1290944}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1300972}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1310937}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1320999}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1320999}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1340945}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1350584}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1350584}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.13606}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1370585}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1380942}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1420588}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1430936}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.144094}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.144094}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.145094}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.145094}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1460955}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1470945}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1480966}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1500573}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1510959}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1510959}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1530585}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1530585}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1540587}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1540587}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1590586}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1620958}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1640937}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.165094}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1680932}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.170056}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1710577}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1730564}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1750839}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.176088}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.177056}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1790836}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1790836}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1810937}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1820955}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1830962}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.184097}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1850586}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1870592}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1870592}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.189055}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1920931}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1930938}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1930938}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.194096}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.194096}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1960967}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.1980944}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.2000582}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                  schema=schema,\n                                                                  database=database) %}\n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.2220767}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.2250571}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.2350588}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.2400565}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.2400565}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.2430584}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.2430584}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.245083}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.2560582}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.259057}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.2630603}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.2650902}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.2670586}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.2680845}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.2690573}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.2710574}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.280083}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.2840812}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.2860644}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.2860644}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.287063}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.2880628}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.2890632}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.2900617}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3000605}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3100927}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3130891}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3130891}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3150563}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3150563}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3150563}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3160586}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3160586}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3180819}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3180819}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3230588}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.331086}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3390644}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3400967}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3400967}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3400967}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3410847}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3410847}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3420932}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3440933}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3450956}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.346094}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3470962}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3620932}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3640947}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3640947}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3730943}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3740942}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3740942}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.375095}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.375095}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3771038}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3780956}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3780956}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.381102}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3860557}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3880963}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.389058}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3950965}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3960564}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.3970938}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.399098}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.400093}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.4010937}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652369609.4010937}}, "docs": {"snowflake_dbt.daily_token_data": {"unique_id": "snowflake_dbt.daily_token_data", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "analytics\\coingecko\\daily_token_data.md", "original_file_path": "models\\analytics\\coingecko\\daily_token_data.md", "name": "daily_token_data", "block_contents": "This table joins the Coingecko TOKENS lookup table with the MARKET_CHARTS daily price/market cap/volume data.\r\n\r\nThe old TIMESTAMP column represented the exact timestamp the price, market cap, and total volume we're taken at. Christian asked that this column be renamed to the the CLOSE_DT and for a new column to be created called OPEN_DT which just subtracts 1 day from the TIMESTAMP column.\r\n\r\nThis table is owned by Christian."}, "snowflake_dbt.treasury_value_by_day": {"unique_id": "snowflake_dbt.treasury_value_by_day", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "analytics\\dao_treasuries\\treasury_value_by_day.md", "original_file_path": "models\\analytics\\dao_treasuries\\treasury_value_by_day.md", "name": "treasury_value_by_day", "block_contents": "This table joins all the lookup tables to provide descriptive descriptions for the granular level of details that each treasury contract holds. This table is where end users should look to find information on DAO Treasury valuations over time."}, "snowflake_dbt.market_charts": {"unique_id": "snowflake_dbt.market_charts", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "landing\\coingecko\\market_charts.md", "original_file_path": "models\\landing\\coingecko\\market_charts.md", "name": "market_charts", "block_contents": "The Coingecko MARKET_CHARTS table contains daily price, market cap, and total volume for all the tokens in the TOKENS lookup table. The Timestamp column corresponds to the exact point at which the other 3 data points are taken.\r\n\r\nThe source table of this is owned by the ?? team and populated by automation. The landing table is located at **LAKE.COINGECKO_LANDING.MARKET_CHARTS**"}, "snowflake_dbt.tokens": {"unique_id": "snowflake_dbt.tokens", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "landing\\coingecko\\tokens.md", "original_file_path": "models\\landing\\coingecko\\tokens.md", "name": "tokens", "block_contents": "The Coingecko TOKENS table is the lookup table used by Coingecko to id each token as well as include data on their name plus the contract addresses of tokens if applicable. Currently the table contains a a running list of the top 500 tokens by volume, meaning once a token enters the top 500 it gets put in the lookup table even if it leaves the top 500.\r\n\r\nThe source table of this is owned by the ?? team and populated by automation. The landing table is located at **LAKE.COINGECKO_LANDING.TOKENS**"}, "snowflake_dbt.daos": {"unique_id": "snowflake_dbt.daos", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "landing\\dao_treasuries\\daos.md", "original_file_path": "models\\landing\\dao_treasuries\\daos.md", "name": "daos", "block_contents": "The master list of DAO's that Delphi is tracking for treasury values across the ecosystem.\r\n\r\nThis table is maintained by Aaron @Amvlvs\r\n\r\nIn this table you will find the unique identifier for the DAO along with its name and primary native token.\r\n\r\nThere are supporting tables to help build out DAO complexity but all of them should reference back to this table to define the unique ID."}, "snowflake_dbt.dao_contracts": {"unique_id": "snowflake_dbt.dao_contracts", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "landing\\dao_treasuries\\dao_contracts.md", "original_file_path": "models\\landing\\dao_treasuries\\dao_contracts.md", "name": "dao_contracts", "block_contents": "The DAO Contracts table is the list of addresses that DAO's have under their control that acrue value to them. This means they are either treasury address, fee distributors, or other focused use cases.\r\n\r\nThe source table of this is owned by the Reaserch team and populated by Aaron. The landing table is located at **LAKE.DAO_LANDING.DAOS_CONTRACTS**"}, "snowflake_dbt.dao_treasury_tokens": {"unique_id": "snowflake_dbt.dao_treasury_tokens", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "landing\\dao_treasuries\\dao_treasury_tokens.md", "original_file_path": "models\\landing\\dao_treasuries\\dao_treasury_tokens.md", "name": "dao_treasury_tokens", "block_contents": "The DAO Treasury Tokens table is a granular level look at the contents of each contract address at the end of each day. This table allows us to track and graph treasury valuation and makeup over time.\r\n\r\nThis table is populated by __Pythia__ and powered by the **Covalent** API to generate daily snapshots for each contract address."}, "snowflake_dbt.stg_dao_treasury_tokens": {"unique_id": "snowflake_dbt.stg_dao_treasury_tokens", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "staging\\dao_treasuries\\stg_dao_treasury_tokens.md", "original_file_path": "models\\staging\\dao_treasuries\\stg_dao_treasury_tokens.md", "name": "stg_dao_treasury_tokens", "block_contents": "The DAO Treasury Tokens table is a granular level look at the contents of each contract address at the end of each day.\r\n\r\nThis staging table is designed so that the values can be represented as both floating point numbers and integers. This allows for greater flexibility across different applications so that we can try and avoid any floating point computation issues once this data is served outside of Snowflake."}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "overview.md", "original_file_path": "docs\\overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "snowflake_dbt.chains": {"unique_id": "snowflake_dbt.chains", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "landing\\chain_details\\chains.md", "original_file_path": "models\\landing\\chain_details\\chains.md", "name": "chains", "block_contents": "This is a lookup table for chains and their EVM chain IDs + lookup IDs.\r\n\r\nThis table is maintained by the data team."}, "snowflake_dbt.terraswap_day_data": {"unique_id": "snowflake_dbt.terraswap_day_data", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "landing\\terraswap\\terraswap_day_data.md", "original_file_path": "models\\landing\\terraswap\\terraswap_day_data.md", "name": "terraswap_day_data", "block_contents": "This table contains daily summary data from the Terraswap subgraph on protocol volume, tvl, fees, and tx count.\r\n\r\nThis table is maintained by Jaryl @jngash\r\n\r\nThis is a landing table that feeds into the combined DEXs table."}, "snowflake_dbt.sushiswap_day_data": {"unique_id": "snowflake_dbt.sushiswap_day_data", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "landing\\sushiswap\\sushiswap_day_data.md", "original_file_path": "models\\landing\\sushiswap\\sushiswap_day_data.md", "name": "sushiswap_day_data", "block_contents": "This table contains daily summary data from the Sushiswap subgraph on protocol volume, tvl, fees, and cumulative tx count.\r\n\r\nThe table is designed to contain multiple chains, currently it only contains data on Ethereum.\r\n\r\nThis table is maintained by Jaryl @jngash\r\n\r\nThis is a landing table that feeds into the combined DEXs table."}, "snowflake_dbt.uniswapv2_day_data": {"unique_id": "snowflake_dbt.uniswapv2_day_data", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "landing\\uniswapv2\\uniswapv2_day_data.md", "original_file_path": "models\\landing\\uniswapv2\\uniswapv2_day_data.md", "name": "uniswapv2_day_data", "block_contents": "This table contains daily summary data from the UniswapV2 subgraph on protocol volume, tvl, fees, and cumulative tx count.\r\n\r\nThe table is designed to contain multiple chains, currently it only contains data on Ethereum.\r\n\r\nThis table is maintained by Jaryl @jngash\r\n\r\nThis is a landing table that feeds into the combined DEXs table."}, "snowflake_dbt.uniswapv3_day_data": {"unique_id": "snowflake_dbt.uniswapv3_day_data", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "landing\\uniswapv3\\uniswapv3_day_data.md", "original_file_path": "models\\landing\\uniswapv3\\uniswapv3_day_data.md", "name": "uniswapv3_day_data", "block_contents": "This table contains daily summary data from the UniswapV3 subgraph on protocol volume, tvl, fees, and cumulative tx count.\r\n\r\nThis table is maintained by Jaryl @jngash\r\n\r\nThis is a landing table that feeds into the combined DEXs table."}, "snowflake_dbt.dex_day_data": {"unique_id": "snowflake_dbt.dex_day_data", "package_name": "snowflake_dbt", "root_path": "C:\\Users\\georg\\Desktop\\Delphi_Digital\\snowflake-dbt", "path": "analytics\\dex\\dex_day_data.md", "original_file_path": "models\\analytics\\dex\\dex_day_data.md", "name": "dex_day_data", "block_contents": "This table unions the seperete day_data table for each dex into one table, containing summary stats on each dex on each chain.\r\n\r\nCurrently contains uniswapv2/v3 and sushiswap on Ethereum.\r\n\r\nThis table is owned by George @gtsarfang."}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.snowflake_dbt.daily_token_data": ["model.snowflake_dbt.market_charts", "model.snowflake_dbt.tokens"], "model.snowflake_dbt.market_charts": [], "model.snowflake_dbt.tokens": [], "model.snowflake_dbt.daos": [], "model.snowflake_dbt.dao_contracts": [], "model.snowflake_dbt.dao_treasury_tokens": [], "model.snowflake_dbt.stg_dao_treasury_tokens": ["model.snowflake_dbt.dao_treasury_tokens"], "test.snowflake_dbt.not_null_daily_token_data_id_str.0ca4b589e2": ["model.snowflake_dbt.daily_token_data"], "test.snowflake_dbt.relationships_daily_token_data_id_str__id__ref_tokens_.333b914fe2": ["model.snowflake_dbt.daily_token_data", "model.snowflake_dbt.tokens"], "test.snowflake_dbt.not_null_daily_token_data_symbol_str.4e590031a7": ["model.snowflake_dbt.daily_token_data"], "test.snowflake_dbt.not_null_daily_token_data_name_str.0ca8fcdf6c": ["model.snowflake_dbt.daily_token_data"], "test.snowflake_dbt.not_null_daily_token_data_close_dt.180354204f": ["model.snowflake_dbt.daily_token_data"], "test.snowflake_dbt.not_null_daily_token_data_open_dt.d748c069c9": ["model.snowflake_dbt.daily_token_data"], "test.snowflake_dbt.relationships_daily_token_data_open_dt__timestamp__ref_market_charts_.584efd0c68": ["model.snowflake_dbt.daily_token_data", "model.snowflake_dbt.market_charts"], "test.snowflake_dbt.not_null_tokens_id.5999063894": ["model.snowflake_dbt.tokens"], "test.snowflake_dbt.relationships_tokens_id__id__ref_market_charts_.e08e5e9989": ["model.snowflake_dbt.market_charts", "model.snowflake_dbt.tokens"], "test.snowflake_dbt.not_null_tokens_symbol.6e96754fee": ["model.snowflake_dbt.tokens"], "test.snowflake_dbt.not_null_tokens_name.e39e09a9dd": ["model.snowflake_dbt.tokens"], "test.snowflake_dbt.not_null_market_charts_id.fefa911bfe": ["model.snowflake_dbt.market_charts"], "test.snowflake_dbt.relationships_market_charts_id__id__ref_tokens_.03d2a212fb": ["model.snowflake_dbt.market_charts", "model.snowflake_dbt.tokens"], "test.snowflake_dbt.not_null_market_charts_timestamp.e7ca812b2c": ["model.snowflake_dbt.market_charts"], "test.snowflake_dbt.unique_daos_dao_id.9f0c55c70a": ["model.snowflake_dbt.daos"], "test.snowflake_dbt.not_null_daos_dao_id.91f9406316": ["model.snowflake_dbt.daos"], "test.snowflake_dbt.unique_dao_contracts_dao_contract_id.b6db050831": ["model.snowflake_dbt.dao_contracts"], "test.snowflake_dbt.not_null_dao_contracts_dao_contract_id.b1e48525bc": ["model.snowflake_dbt.dao_contracts"], "test.snowflake_dbt.not_null_dao_contracts_dao_id.00873314fd": ["model.snowflake_dbt.dao_contracts"], "test.snowflake_dbt.relationships_dao_contracts_dao_id__dao_id__ref_daos_.9c88316a19": ["model.snowflake_dbt.dao_contracts", "model.snowflake_dbt.daos"], "test.snowflake_dbt.not_null_dao_contracts_network.7bdae210cf": ["model.snowflake_dbt.dao_contracts"], "test.snowflake_dbt.accepted_values_dao_contracts_network__ethereum__polygon.1e1788ea24": ["model.snowflake_dbt.dao_contracts"], "test.snowflake_dbt.not_null_dao_contracts_label.82ae0ec997": ["model.snowflake_dbt.dao_contracts"], "test.snowflake_dbt.accepted_values_dao_contracts_label__treasury__fee_distributer__treasury_ops.55652b6c9b": ["model.snowflake_dbt.dao_contracts"], "test.snowflake_dbt.unique_dao_contracts_contract_address.e08d0c7268": ["model.snowflake_dbt.dao_contracts"], "test.snowflake_dbt.not_null_dao_contracts_contract_address.1c043bbe7d": ["model.snowflake_dbt.dao_contracts"], "test.snowflake_dbt.not_null_dao_treasury_tokens_dao_id.0e0f4be0c9": ["model.snowflake_dbt.dao_treasury_tokens"], "test.snowflake_dbt.relationships_dao_treasury_tokens_dao_id__dao_id__ref_daos_.6e135d6ca7": ["model.snowflake_dbt.dao_treasury_tokens", "model.snowflake_dbt.daos"], "test.snowflake_dbt.not_null_dao_treasury_tokens_dao_contract_id.72ec100be1": ["model.snowflake_dbt.dao_treasury_tokens"], "test.snowflake_dbt.relationships_dao_treasury_tokens_dao_contract_id__dao_contract_id__ref_dao_contracts_.76ef459d76": ["model.snowflake_dbt.dao_contracts", "model.snowflake_dbt.dao_treasury_tokens"], "test.snowflake_dbt.not_null_dao_treasury_tokens_date.50eaacc3cf": ["model.snowflake_dbt.dao_treasury_tokens"], "model.snowflake_dbt.chains": [], "test.snowflake_dbt.unique_chains_id.33bb2f5e05": ["model.snowflake_dbt.chains"], "test.snowflake_dbt.not_null_chains_id.3db750ce1c": ["model.snowflake_dbt.chains"], "test.snowflake_dbt.not_null_chains_name.ce1cda53df": ["model.snowflake_dbt.chains"], "test.snowflake_dbt.unique_chains_name.3d7ff371c0": ["model.snowflake_dbt.chains"], "test.snowflake_dbt.unique_chains_chain_id.592144dd73": ["model.snowflake_dbt.chains"], "model.snowflake_dbt.treasury_value_by_day": ["model.snowflake_dbt.dao_contracts", "model.snowflake_dbt.daos", "model.snowflake_dbt.stg_dao_treasury_tokens"], "model.snowflake_dbt.dex_day_data": ["model.snowflake_dbt.chains", "model.snowflake_dbt.sushiswap_day_data", "model.snowflake_dbt.terraswap_day_data", "model.snowflake_dbt.uniswapv2_day_data", "model.snowflake_dbt.uniswapv3_day_data"], "model.snowflake_dbt.terraswap_day_data": [], "model.snowflake_dbt.sushiswap_day_data": [], "model.snowflake_dbt.uniswapv2_day_data": [], "model.snowflake_dbt.uniswapv3_day_data": [], "test.snowflake_dbt.not_null_treasury_value_by_day_dao_id.9d8f57dc40": ["model.snowflake_dbt.treasury_value_by_day"], "test.snowflake_dbt.relationships_treasury_value_by_day_dao_id__dao_id__ref_daos_.d2b4a9c470": ["model.snowflake_dbt.daos", "model.snowflake_dbt.treasury_value_by_day"], "test.snowflake_dbt.not_null_treasury_value_by_day_dao_contract_id.ded4150ab7": ["model.snowflake_dbt.treasury_value_by_day"], "test.snowflake_dbt.relationships_treasury_value_by_day_dao_contract_id__dao_contract_id__ref_dao_contracts_.48d772c11d": ["model.snowflake_dbt.dao_contracts", "model.snowflake_dbt.treasury_value_by_day"], "test.snowflake_dbt.not_null_treasury_value_by_day_network.c7171ee6a8": ["model.snowflake_dbt.treasury_value_by_day"], "test.snowflake_dbt.accepted_values_treasury_value_by_day_network__ethereum__polygon.a7ee7eadc9": ["model.snowflake_dbt.treasury_value_by_day"], "test.snowflake_dbt.not_null_treasury_value_by_day_label.2655e2a43f": ["model.snowflake_dbt.treasury_value_by_day"], "test.snowflake_dbt.accepted_values_treasury_value_by_day_label__treasury__fee_distributer__treasury_ops.654443f6f1": ["model.snowflake_dbt.treasury_value_by_day"], "test.snowflake_dbt.not_null_treasury_value_by_day_contract_address.48fd28c96e": ["model.snowflake_dbt.treasury_value_by_day"], "test.snowflake_dbt.not_null_treasury_value_by_day_date.ee316b970b": ["model.snowflake_dbt.treasury_value_by_day"], "test.snowflake_dbt.unique_terraswap_day_data_date.0e1d660fcb": ["model.snowflake_dbt.terraswap_day_data"], "test.snowflake_dbt.not_null_terraswap_day_data_date.6610dfd051": ["model.snowflake_dbt.terraswap_day_data"], "test.snowflake_dbt.not_null_terraswap_day_data_chain_id.af265c03e3": ["model.snowflake_dbt.terraswap_day_data"], "test.snowflake_dbt.not_null_terraswap_day_data_tx_count.5f11a1a568": ["model.snowflake_dbt.terraswap_day_data"], "test.snowflake_dbt.not_null_dex_day_data_date_dt.afcc78e366": ["model.snowflake_dbt.dex_day_data"], "test.snowflake_dbt.relationships_dex_day_data_date_dt__date__ref_uniswapv2_day_data_.f65f941b62": ["model.snowflake_dbt.dex_day_data", "model.snowflake_dbt.uniswapv2_day_data"], "test.snowflake_dbt.not_null_dex_day_data_protocol_name_str.420535d696": ["model.snowflake_dbt.dex_day_data"], "test.snowflake_dbt.accepted_values_dex_day_data_protocol_name_str__uniswapv2__uniswapv3__sushiswap__terraswap.90840fad2a": ["model.snowflake_dbt.dex_day_data"], "test.snowflake_dbt.not_null_dex_day_data_chain_name_str.ab7a62a39f": ["model.snowflake_dbt.dex_day_data"], "test.snowflake_dbt.relationships_dex_day_data_chain_id_nbr__chain_id__ref_chains_.6ee5b58ad5": ["model.snowflake_dbt.chains", "model.snowflake_dbt.dex_day_data"], "test.snowflake_dbt.not_null_dex_day_data_tx_count_nbr.4786ef75dc": ["model.snowflake_dbt.dex_day_data"], "test.snowflake_dbt.not_null_dex_day_data_tx_count_cumulative_nbr.e0b4aaa70d": ["model.snowflake_dbt.dex_day_data"], "test.snowflake_dbt.unique_sushiswap_day_data_date.05462d8b49": ["model.snowflake_dbt.sushiswap_day_data"], "test.snowflake_dbt.not_null_sushiswap_day_data_date.2e7232fcd3": ["model.snowflake_dbt.sushiswap_day_data"], "test.snowflake_dbt.not_null_sushiswap_day_data_chain_id.dd3e864b81": ["model.snowflake_dbt.sushiswap_day_data"], "test.snowflake_dbt.relationships_sushiswap_day_data_chain_id__chain_id__ref_chains_.edc6f81d40": ["model.snowflake_dbt.chains", "model.snowflake_dbt.sushiswap_day_data"], "test.snowflake_dbt.not_null_sushiswap_day_data_tvl_usd.0742dcbf6a": ["model.snowflake_dbt.sushiswap_day_data"], "test.snowflake_dbt.not_null_sushiswap_day_data_volume_usd.2755897b1f": ["model.snowflake_dbt.sushiswap_day_data"], "test.snowflake_dbt.not_null_sushiswap_day_data_fees_usd.86d82bf175": ["model.snowflake_dbt.sushiswap_day_data"], "test.snowflake_dbt.not_null_sushiswap_day_data_tx_count_cumulative.0d718c040d": ["model.snowflake_dbt.sushiswap_day_data"], "test.snowflake_dbt.unique_uniswapv2_day_data_date.0ddac06709": ["model.snowflake_dbt.uniswapv2_day_data"], "test.snowflake_dbt.not_null_uniswapv2_day_data_date.605c976cb3": ["model.snowflake_dbt.uniswapv2_day_data"], "test.snowflake_dbt.not_null_uniswapv2_day_data_chain_id.96c206c610": ["model.snowflake_dbt.uniswapv2_day_data"], "test.snowflake_dbt.relationships_uniswapv2_day_data_chain_id__chain_id__ref_chains_.e739f78ab8": ["model.snowflake_dbt.chains", "model.snowflake_dbt.uniswapv2_day_data"], "test.snowflake_dbt.not_null_uniswapv2_day_data_tvl_usd.a226c5ba98": ["model.snowflake_dbt.uniswapv2_day_data"], "test.snowflake_dbt.not_null_uniswapv2_day_data_volume_usd.78f8bdfa16": ["model.snowflake_dbt.uniswapv2_day_data"], "test.snowflake_dbt.not_null_uniswapv2_day_data_fees_usd.f9d9c8a5d2": ["model.snowflake_dbt.uniswapv2_day_data"], "test.snowflake_dbt.not_null_uniswapv2_day_data_tx_count_cumulative.e86c9fc261": ["model.snowflake_dbt.uniswapv2_day_data"], "test.snowflake_dbt.unique_uniswapv3_day_data_date.818b6b1825": ["model.snowflake_dbt.uniswapv3_day_data"], "test.snowflake_dbt.not_null_uniswapv3_day_data_date.09ea59d4d5": ["model.snowflake_dbt.uniswapv3_day_data"], "test.snowflake_dbt.not_null_uniswapv3_day_data_chain_id.f19b0f86ea": ["model.snowflake_dbt.uniswapv3_day_data"], "test.snowflake_dbt.relationships_uniswapv3_day_data_chain_id__chain_id__ref_chains_.27aeb822db": ["model.snowflake_dbt.chains", "model.snowflake_dbt.uniswapv3_day_data"], "test.snowflake_dbt.not_null_uniswapv3_day_data_tvl_usd.9b93f821df": ["model.snowflake_dbt.uniswapv3_day_data"], "test.snowflake_dbt.not_null_uniswapv3_day_data_volume_usd.be30eafeba": ["model.snowflake_dbt.uniswapv3_day_data"], "test.snowflake_dbt.not_null_uniswapv3_day_data_fees_usd.afcf8d2975": ["model.snowflake_dbt.uniswapv3_day_data"], "test.snowflake_dbt.not_null_uniswapv3_day_data_tx_count_cumulative.eecc2d8662": ["model.snowflake_dbt.uniswapv3_day_data"]}, "child_map": {"model.snowflake_dbt.daily_token_data": ["test.snowflake_dbt.not_null_daily_token_data_close_dt.180354204f", "test.snowflake_dbt.not_null_daily_token_data_id_str.0ca4b589e2", "test.snowflake_dbt.not_null_daily_token_data_name_str.0ca8fcdf6c", "test.snowflake_dbt.not_null_daily_token_data_open_dt.d748c069c9", "test.snowflake_dbt.not_null_daily_token_data_symbol_str.4e590031a7", "test.snowflake_dbt.relationships_daily_token_data_id_str__id__ref_tokens_.333b914fe2", "test.snowflake_dbt.relationships_daily_token_data_open_dt__timestamp__ref_market_charts_.584efd0c68"], "model.snowflake_dbt.market_charts": ["model.snowflake_dbt.daily_token_data", "test.snowflake_dbt.not_null_market_charts_id.fefa911bfe", "test.snowflake_dbt.not_null_market_charts_timestamp.e7ca812b2c", "test.snowflake_dbt.relationships_daily_token_data_open_dt__timestamp__ref_market_charts_.584efd0c68", "test.snowflake_dbt.relationships_market_charts_id__id__ref_tokens_.03d2a212fb", "test.snowflake_dbt.relationships_tokens_id__id__ref_market_charts_.e08e5e9989"], "model.snowflake_dbt.tokens": ["model.snowflake_dbt.daily_token_data", "test.snowflake_dbt.not_null_tokens_id.5999063894", "test.snowflake_dbt.not_null_tokens_name.e39e09a9dd", "test.snowflake_dbt.not_null_tokens_symbol.6e96754fee", "test.snowflake_dbt.relationships_daily_token_data_id_str__id__ref_tokens_.333b914fe2", "test.snowflake_dbt.relationships_market_charts_id__id__ref_tokens_.03d2a212fb", "test.snowflake_dbt.relationships_tokens_id__id__ref_market_charts_.e08e5e9989"], "model.snowflake_dbt.daos": ["model.snowflake_dbt.treasury_value_by_day", "test.snowflake_dbt.not_null_daos_dao_id.91f9406316", "test.snowflake_dbt.relationships_dao_contracts_dao_id__dao_id__ref_daos_.9c88316a19", "test.snowflake_dbt.relationships_dao_treasury_tokens_dao_id__dao_id__ref_daos_.6e135d6ca7", "test.snowflake_dbt.relationships_treasury_value_by_day_dao_id__dao_id__ref_daos_.d2b4a9c470", "test.snowflake_dbt.unique_daos_dao_id.9f0c55c70a"], "model.snowflake_dbt.dao_contracts": ["model.snowflake_dbt.treasury_value_by_day", "test.snowflake_dbt.accepted_values_dao_contracts_label__treasury__fee_distributer__treasury_ops.55652b6c9b", "test.snowflake_dbt.accepted_values_dao_contracts_network__ethereum__polygon.1e1788ea24", "test.snowflake_dbt.not_null_dao_contracts_contract_address.1c043bbe7d", "test.snowflake_dbt.not_null_dao_contracts_dao_contract_id.b1e48525bc", "test.snowflake_dbt.not_null_dao_contracts_dao_id.00873314fd", "test.snowflake_dbt.not_null_dao_contracts_label.82ae0ec997", "test.snowflake_dbt.not_null_dao_contracts_network.7bdae210cf", "test.snowflake_dbt.relationships_dao_contracts_dao_id__dao_id__ref_daos_.9c88316a19", "test.snowflake_dbt.relationships_dao_treasury_tokens_dao_contract_id__dao_contract_id__ref_dao_contracts_.76ef459d76", "test.snowflake_dbt.relationships_treasury_value_by_day_dao_contract_id__dao_contract_id__ref_dao_contracts_.48d772c11d", "test.snowflake_dbt.unique_dao_contracts_contract_address.e08d0c7268", "test.snowflake_dbt.unique_dao_contracts_dao_contract_id.b6db050831"], "model.snowflake_dbt.dao_treasury_tokens": ["model.snowflake_dbt.stg_dao_treasury_tokens", "test.snowflake_dbt.not_null_dao_treasury_tokens_dao_contract_id.72ec100be1", "test.snowflake_dbt.not_null_dao_treasury_tokens_dao_id.0e0f4be0c9", "test.snowflake_dbt.not_null_dao_treasury_tokens_date.50eaacc3cf", "test.snowflake_dbt.relationships_dao_treasury_tokens_dao_contract_id__dao_contract_id__ref_dao_contracts_.76ef459d76", "test.snowflake_dbt.relationships_dao_treasury_tokens_dao_id__dao_id__ref_daos_.6e135d6ca7"], "model.snowflake_dbt.stg_dao_treasury_tokens": ["model.snowflake_dbt.treasury_value_by_day"], "test.snowflake_dbt.not_null_daily_token_data_id_str.0ca4b589e2": [], "test.snowflake_dbt.relationships_daily_token_data_id_str__id__ref_tokens_.333b914fe2": [], "test.snowflake_dbt.not_null_daily_token_data_symbol_str.4e590031a7": [], "test.snowflake_dbt.not_null_daily_token_data_name_str.0ca8fcdf6c": [], "test.snowflake_dbt.not_null_daily_token_data_close_dt.180354204f": [], "test.snowflake_dbt.not_null_daily_token_data_open_dt.d748c069c9": [], "test.snowflake_dbt.relationships_daily_token_data_open_dt__timestamp__ref_market_charts_.584efd0c68": [], "test.snowflake_dbt.not_null_tokens_id.5999063894": [], "test.snowflake_dbt.relationships_tokens_id__id__ref_market_charts_.e08e5e9989": [], "test.snowflake_dbt.not_null_tokens_symbol.6e96754fee": [], "test.snowflake_dbt.not_null_tokens_name.e39e09a9dd": [], "test.snowflake_dbt.not_null_market_charts_id.fefa911bfe": [], "test.snowflake_dbt.relationships_market_charts_id__id__ref_tokens_.03d2a212fb": [], "test.snowflake_dbt.not_null_market_charts_timestamp.e7ca812b2c": [], "test.snowflake_dbt.unique_daos_dao_id.9f0c55c70a": [], "test.snowflake_dbt.not_null_daos_dao_id.91f9406316": [], "test.snowflake_dbt.unique_dao_contracts_dao_contract_id.b6db050831": [], "test.snowflake_dbt.not_null_dao_contracts_dao_contract_id.b1e48525bc": [], "test.snowflake_dbt.not_null_dao_contracts_dao_id.00873314fd": [], "test.snowflake_dbt.relationships_dao_contracts_dao_id__dao_id__ref_daos_.9c88316a19": [], "test.snowflake_dbt.not_null_dao_contracts_network.7bdae210cf": [], "test.snowflake_dbt.accepted_values_dao_contracts_network__ethereum__polygon.1e1788ea24": [], "test.snowflake_dbt.not_null_dao_contracts_label.82ae0ec997": [], "test.snowflake_dbt.accepted_values_dao_contracts_label__treasury__fee_distributer__treasury_ops.55652b6c9b": [], "test.snowflake_dbt.unique_dao_contracts_contract_address.e08d0c7268": [], "test.snowflake_dbt.not_null_dao_contracts_contract_address.1c043bbe7d": [], "test.snowflake_dbt.not_null_dao_treasury_tokens_dao_id.0e0f4be0c9": [], "test.snowflake_dbt.relationships_dao_treasury_tokens_dao_id__dao_id__ref_daos_.6e135d6ca7": [], "test.snowflake_dbt.not_null_dao_treasury_tokens_dao_contract_id.72ec100be1": [], "test.snowflake_dbt.relationships_dao_treasury_tokens_dao_contract_id__dao_contract_id__ref_dao_contracts_.76ef459d76": [], "test.snowflake_dbt.not_null_dao_treasury_tokens_date.50eaacc3cf": [], "model.snowflake_dbt.chains": ["model.snowflake_dbt.dex_day_data", "test.snowflake_dbt.not_null_chains_id.3db750ce1c", "test.snowflake_dbt.not_null_chains_name.ce1cda53df", "test.snowflake_dbt.relationships_dex_day_data_chain_id_nbr__chain_id__ref_chains_.6ee5b58ad5", "test.snowflake_dbt.relationships_sushiswap_day_data_chain_id__chain_id__ref_chains_.edc6f81d40", "test.snowflake_dbt.relationships_uniswapv2_day_data_chain_id__chain_id__ref_chains_.e739f78ab8", "test.snowflake_dbt.relationships_uniswapv3_day_data_chain_id__chain_id__ref_chains_.27aeb822db", "test.snowflake_dbt.unique_chains_chain_id.592144dd73", "test.snowflake_dbt.unique_chains_id.33bb2f5e05", "test.snowflake_dbt.unique_chains_name.3d7ff371c0"], "test.snowflake_dbt.unique_chains_id.33bb2f5e05": [], "test.snowflake_dbt.not_null_chains_id.3db750ce1c": [], "test.snowflake_dbt.not_null_chains_name.ce1cda53df": [], "test.snowflake_dbt.unique_chains_name.3d7ff371c0": [], "test.snowflake_dbt.unique_chains_chain_id.592144dd73": [], "model.snowflake_dbt.treasury_value_by_day": ["test.snowflake_dbt.accepted_values_treasury_value_by_day_label__treasury__fee_distributer__treasury_ops.654443f6f1", "test.snowflake_dbt.accepted_values_treasury_value_by_day_network__ethereum__polygon.a7ee7eadc9", "test.snowflake_dbt.not_null_treasury_value_by_day_contract_address.48fd28c96e", "test.snowflake_dbt.not_null_treasury_value_by_day_dao_contract_id.ded4150ab7", "test.snowflake_dbt.not_null_treasury_value_by_day_dao_id.9d8f57dc40", "test.snowflake_dbt.not_null_treasury_value_by_day_date.ee316b970b", "test.snowflake_dbt.not_null_treasury_value_by_day_label.2655e2a43f", "test.snowflake_dbt.not_null_treasury_value_by_day_network.c7171ee6a8", "test.snowflake_dbt.relationships_treasury_value_by_day_dao_contract_id__dao_contract_id__ref_dao_contracts_.48d772c11d", "test.snowflake_dbt.relationships_treasury_value_by_day_dao_id__dao_id__ref_daos_.d2b4a9c470"], "model.snowflake_dbt.dex_day_data": ["test.snowflake_dbt.accepted_values_dex_day_data_protocol_name_str__uniswapv2__uniswapv3__sushiswap__terraswap.90840fad2a", "test.snowflake_dbt.not_null_dex_day_data_chain_name_str.ab7a62a39f", "test.snowflake_dbt.not_null_dex_day_data_date_dt.afcc78e366", "test.snowflake_dbt.not_null_dex_day_data_protocol_name_str.420535d696", "test.snowflake_dbt.not_null_dex_day_data_tx_count_cumulative_nbr.e0b4aaa70d", "test.snowflake_dbt.not_null_dex_day_data_tx_count_nbr.4786ef75dc", "test.snowflake_dbt.relationships_dex_day_data_chain_id_nbr__chain_id__ref_chains_.6ee5b58ad5", "test.snowflake_dbt.relationships_dex_day_data_date_dt__date__ref_uniswapv2_day_data_.f65f941b62"], "model.snowflake_dbt.terraswap_day_data": ["model.snowflake_dbt.dex_day_data", "test.snowflake_dbt.not_null_terraswap_day_data_chain_id.af265c03e3", "test.snowflake_dbt.not_null_terraswap_day_data_date.6610dfd051", "test.snowflake_dbt.not_null_terraswap_day_data_tx_count.5f11a1a568", "test.snowflake_dbt.unique_terraswap_day_data_date.0e1d660fcb"], "model.snowflake_dbt.sushiswap_day_data": ["model.snowflake_dbt.dex_day_data", "test.snowflake_dbt.not_null_sushiswap_day_data_chain_id.dd3e864b81", "test.snowflake_dbt.not_null_sushiswap_day_data_date.2e7232fcd3", "test.snowflake_dbt.not_null_sushiswap_day_data_fees_usd.86d82bf175", "test.snowflake_dbt.not_null_sushiswap_day_data_tvl_usd.0742dcbf6a", "test.snowflake_dbt.not_null_sushiswap_day_data_tx_count_cumulative.0d718c040d", "test.snowflake_dbt.not_null_sushiswap_day_data_volume_usd.2755897b1f", "test.snowflake_dbt.relationships_sushiswap_day_data_chain_id__chain_id__ref_chains_.edc6f81d40", "test.snowflake_dbt.unique_sushiswap_day_data_date.05462d8b49"], "model.snowflake_dbt.uniswapv2_day_data": ["model.snowflake_dbt.dex_day_data", "test.snowflake_dbt.not_null_uniswapv2_day_data_chain_id.96c206c610", "test.snowflake_dbt.not_null_uniswapv2_day_data_date.605c976cb3", "test.snowflake_dbt.not_null_uniswapv2_day_data_fees_usd.f9d9c8a5d2", "test.snowflake_dbt.not_null_uniswapv2_day_data_tvl_usd.a226c5ba98", "test.snowflake_dbt.not_null_uniswapv2_day_data_tx_count_cumulative.e86c9fc261", "test.snowflake_dbt.not_null_uniswapv2_day_data_volume_usd.78f8bdfa16", "test.snowflake_dbt.relationships_dex_day_data_date_dt__date__ref_uniswapv2_day_data_.f65f941b62", "test.snowflake_dbt.relationships_uniswapv2_day_data_chain_id__chain_id__ref_chains_.e739f78ab8", "test.snowflake_dbt.unique_uniswapv2_day_data_date.0ddac06709"], "model.snowflake_dbt.uniswapv3_day_data": ["model.snowflake_dbt.dex_day_data", "test.snowflake_dbt.not_null_uniswapv3_day_data_chain_id.f19b0f86ea", "test.snowflake_dbt.not_null_uniswapv3_day_data_date.09ea59d4d5", "test.snowflake_dbt.not_null_uniswapv3_day_data_fees_usd.afcf8d2975", "test.snowflake_dbt.not_null_uniswapv3_day_data_tvl_usd.9b93f821df", "test.snowflake_dbt.not_null_uniswapv3_day_data_tx_count_cumulative.eecc2d8662", "test.snowflake_dbt.not_null_uniswapv3_day_data_volume_usd.be30eafeba", "test.snowflake_dbt.relationships_uniswapv3_day_data_chain_id__chain_id__ref_chains_.27aeb822db", "test.snowflake_dbt.unique_uniswapv3_day_data_date.818b6b1825"], "test.snowflake_dbt.not_null_treasury_value_by_day_dao_id.9d8f57dc40": [], "test.snowflake_dbt.relationships_treasury_value_by_day_dao_id__dao_id__ref_daos_.d2b4a9c470": [], "test.snowflake_dbt.not_null_treasury_value_by_day_dao_contract_id.ded4150ab7": [], "test.snowflake_dbt.relationships_treasury_value_by_day_dao_contract_id__dao_contract_id__ref_dao_contracts_.48d772c11d": [], "test.snowflake_dbt.not_null_treasury_value_by_day_network.c7171ee6a8": [], "test.snowflake_dbt.accepted_values_treasury_value_by_day_network__ethereum__polygon.a7ee7eadc9": [], "test.snowflake_dbt.not_null_treasury_value_by_day_label.2655e2a43f": [], "test.snowflake_dbt.accepted_values_treasury_value_by_day_label__treasury__fee_distributer__treasury_ops.654443f6f1": [], "test.snowflake_dbt.not_null_treasury_value_by_day_contract_address.48fd28c96e": [], "test.snowflake_dbt.not_null_treasury_value_by_day_date.ee316b970b": [], "test.snowflake_dbt.unique_terraswap_day_data_date.0e1d660fcb": [], "test.snowflake_dbt.not_null_terraswap_day_data_date.6610dfd051": [], "test.snowflake_dbt.not_null_terraswap_day_data_chain_id.af265c03e3": [], "test.snowflake_dbt.not_null_terraswap_day_data_tx_count.5f11a1a568": [], "test.snowflake_dbt.not_null_dex_day_data_date_dt.afcc78e366": [], "test.snowflake_dbt.relationships_dex_day_data_date_dt__date__ref_uniswapv2_day_data_.f65f941b62": [], "test.snowflake_dbt.not_null_dex_day_data_protocol_name_str.420535d696": [], "test.snowflake_dbt.accepted_values_dex_day_data_protocol_name_str__uniswapv2__uniswapv3__sushiswap__terraswap.90840fad2a": [], "test.snowflake_dbt.not_null_dex_day_data_chain_name_str.ab7a62a39f": [], "test.snowflake_dbt.relationships_dex_day_data_chain_id_nbr__chain_id__ref_chains_.6ee5b58ad5": [], "test.snowflake_dbt.not_null_dex_day_data_tx_count_nbr.4786ef75dc": [], "test.snowflake_dbt.not_null_dex_day_data_tx_count_cumulative_nbr.e0b4aaa70d": [], "test.snowflake_dbt.unique_sushiswap_day_data_date.05462d8b49": [], "test.snowflake_dbt.not_null_sushiswap_day_data_date.2e7232fcd3": [], "test.snowflake_dbt.not_null_sushiswap_day_data_chain_id.dd3e864b81": [], "test.snowflake_dbt.relationships_sushiswap_day_data_chain_id__chain_id__ref_chains_.edc6f81d40": [], "test.snowflake_dbt.not_null_sushiswap_day_data_tvl_usd.0742dcbf6a": [], "test.snowflake_dbt.not_null_sushiswap_day_data_volume_usd.2755897b1f": [], "test.snowflake_dbt.not_null_sushiswap_day_data_fees_usd.86d82bf175": [], "test.snowflake_dbt.not_null_sushiswap_day_data_tx_count_cumulative.0d718c040d": [], "test.snowflake_dbt.unique_uniswapv2_day_data_date.0ddac06709": [], "test.snowflake_dbt.not_null_uniswapv2_day_data_date.605c976cb3": [], "test.snowflake_dbt.not_null_uniswapv2_day_data_chain_id.96c206c610": [], "test.snowflake_dbt.relationships_uniswapv2_day_data_chain_id__chain_id__ref_chains_.e739f78ab8": [], "test.snowflake_dbt.not_null_uniswapv2_day_data_tvl_usd.a226c5ba98": [], "test.snowflake_dbt.not_null_uniswapv2_day_data_volume_usd.78f8bdfa16": [], "test.snowflake_dbt.not_null_uniswapv2_day_data_fees_usd.f9d9c8a5d2": [], "test.snowflake_dbt.not_null_uniswapv2_day_data_tx_count_cumulative.e86c9fc261": [], "test.snowflake_dbt.unique_uniswapv3_day_data_date.818b6b1825": [], "test.snowflake_dbt.not_null_uniswapv3_day_data_date.09ea59d4d5": [], "test.snowflake_dbt.not_null_uniswapv3_day_data_chain_id.f19b0f86ea": [], "test.snowflake_dbt.relationships_uniswapv3_day_data_chain_id__chain_id__ref_chains_.27aeb822db": [], "test.snowflake_dbt.not_null_uniswapv3_day_data_tvl_usd.9b93f821df": [], "test.snowflake_dbt.not_null_uniswapv3_day_data_volume_usd.be30eafeba": [], "test.snowflake_dbt.not_null_uniswapv3_day_data_fees_usd.afcf8d2975": [], "test.snowflake_dbt.not_null_uniswapv3_day_data_tx_count_cumulative.eecc2d8662": []}}